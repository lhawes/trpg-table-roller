{"version":3,"sources":["state/generator/generatorActionTypes.ts","components/shared/BodyContainer.tsx","components/Header.tsx","state/generator/generatorActions.ts","constants/styleConstants.ts","components/shared/SecondaryButton.tsx","components/ClearHistory.tsx","state/generator/generatorReducer.ts","state/generator/generatorSelectors.ts","utils/saveFile.ts","components/shared/PrimaryButton.tsx","components/ExportDataButton.tsx","utils/uploadFile.ts","components/FileUploadInput.tsx","components/shared/UserInput.tsx","components/shared/UserInputPrimary.tsx","components/GeneratorName.tsx","components/HistoryList.tsx","state/exampleDataState.ts","components/LoadExampleDataButton.tsx","constants/templateDelimiter.ts","state/generator/rollSelectors.ts","components/RollOnTableButton.tsx","components/shared/Section.tsx","components/shared/SubLayout.tsx","components/Table.tsx","components/layouts/TableNameLayout.tsx","components/layouts/TableLayout.tsx","components/TableList.tsx","components/layouts/TableListLayout.tsx","utils/emptyTable.ts","components/TextTemplate.tsx","components/layouts/TextTemplateLayout.tsx","components/layouts/BasePageLayout.tsx","state/rootInitialState.ts","state/rootReducer.ts","utils/combineReducers.ts","App.tsx","utils/defaultDispatch.ts","reportWebVitals.js","index.js"],"names":["GeneratorActionTypes","bodyContainerCss","css","maxWidth","margin","display","flexDirection","BodyContainer","children","style","computedCss","useMemo","headerContainerStyle","backgroundColor","headerStyle","color","padding","siteNameTitleStyle","fontWeight","Header","addTableEntryAction","tableEntry","tableIndex","type","ADD_TABLE_ENTRY","payload","updateStateFromFileAction","fileState","UPDATE_STATE_FROM_FILE","redScheme","primary","secondary","blue","light","dark","secondaryButtonStyle","border","width","SecondaryButton","onClick","computedStyle","ClearHistory","dispatch","useContext","DispatchContext","clearRollToHistory","useCallback","CLEAR_HISTORY","generatorInitialState","generatorName","textTemplate","tables","name","entries","operations","history","version","getGeneratorSection","state","getGeneratorName","getGeneratorTables","getGeneratorTextTemplate","canSave","Blob","e","console","error","primaryButtonStyle","PrimaryButton","ExportDataButton","StateContext","exportData","data","Error","blob","saveAs","saveFile","JSON","stringify","transformStateForFile","convertContentToObj","content","parse","readFileContent","file","reader","FileReader","Promise","resolve","reject","onload","event","target","result","onerror","readAsText","uploadStyle","FileUploadInput","callback","updateStateFromFile","getFileHandler","input","files","length","then","catch","log","id","onChange","UserInput","value","placeHolder","onKeyDown","tabIndex","placeholder","inputHoverStyle","borderBottom","height","baseUserInputPrimaryStyle","outline","UserInputPrimary","GeneratorName","changeGeneratorNameTemplate","CHANGE_GENERATOR_NAME","changeGeneratorNameAction","historyEntryStyle","fontStyle","HistoryList","historyEntries","getGeneratorHistory","map","rollEntry","i","key","reverse","exampleDataState","LoadExampleDataButton","loadExampleDataHandler","templateDelimiter","index","regexDelimiter","getRandomEntryFromArray","min","max","Math","floor","random","getResult","table","getRandomEntries","template","reduce","delimitedText","includes","regex","RegExp","replace","RollOnTableButton","pushRollToHistory","tableRollResult","ADD_TO_HISTORY","sectionCss","Section","layout","subLayoutCss","SubLayout","TableComponent","render","tableName","tableEntries","updateTableName","tableNameValue","CHANGE_TABLE_NAME","changeTableNameAction","updateTableEntry","TableEntryIndex","tableEntryValue","tableEntryIndex","CHANGE_TABLE_ENTRY","changeTableEntryAction","removeTableEntry","_e","REMOVE_TABLE_ENTRY","removeTableEntryAction","addTableEntry","handleLastEntryEnterKey","entry","changeEntry","entryIndex","removeEntry","tableNameLayout","gridTemplateColumns","gridTemplateRows","tableDiceStyle","gridColumnStart","gridColumnEnd","gridRow","justifySelf","tableNameInputStyle","fontSize","tableSymbolStyle","TableNameLayout","tableLength","tableSymbol","IndividualTableGrid","tableNameStyle","tableButtons","removeTableButton","float","removeButtonStyle","appearance","coloredEntryStyle","TableComponentLayout","removeTable","REMOVE_TABLE","removeTableAction","addStyle","undefined","TableList","addTableButton","TableListLayout","addTable","ADD_TABLE","TextTemplate","changeTextTemplate","CHANGE_TEXT_TEMPLATE","changeTextTemplateAction","textTemplateContainerStyle","textTemplateInputStyle","marginBottom","previewStyle","overflow","textTemplateTitleStyle","TextTemplateLayout","preview","getTextTemplatePreview","generatorNameLayout","gridColumn","tableListSectionLayout","textTemplateLayoutStyles","rollOnTableButtonLayout","rollResultLayout","historyListLayout","exportDataButtonLayout","fileUploadInputLayout","clearHistoryLayout","loadExampleDataLayout","pageLayout","columnGap","tableGridLayout","resultGridLayout","generatorNameStyles","BasePageLayout","rootInitialState","reducers","rootReducer","action","newState","newTable","push","filter","_v","Object","keys","forEach","React","createContext","App","useReducer","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a2e77ea.chunk.js","sourcesContent":["export enum GeneratorActionTypes {\n  CHANGE_TEXT_TEMPLATE = '@generator/CHANGE_TEXT_TEMPLATE',\n  CHANGE_GENERATOR_NAME = '@generator/CHANGE_GENERATOR_NAME',\n  ADD_TABLE = '@generator/ADD_TABLE',\n  REMOVE_TABLE = '@generator/REMOVE_TABLE',\n\n  CHANGE_TABLE_NAME = '@table/CHANGE_TABLE_NAME',\n  ADD_TABLE_ENTRY = '@table/ADD_TABLE_ENTRY',\n  REMOVE_TABLE_ENTRY = '@table/REMOVE_TABLE_ENTRY',\n  CHANGE_TABLE_ENTRY = '@table/CHANGE_TABLE_ENTRY',\n\n  UPDATE_STATE_FROM_FILE = '@app/UPDATE_STATE_FROM_FILE',\n  ADD_TO_HISTORY = '@history/ADD_TO_HISTORY',\n  CLEAR_HISTORY = '@history/CLEAR_HISTORY',\n}","/** @jsx jsx */\nimport { jsx, css, SerializedStyles } from \"@emotion/react\";\nimport { useMemo } from \"react\";\nimport { Header } from \"../Header\";\n\nconst bodyContainerCss = css({\n  maxWidth: '1200px',\n  margin: '0 auto',\n  display: 'flex',\n  flexDirection: 'column',\n});\n\nexport interface BodyContainerProps {\n  style?: SerializedStyles\n}\n\nexport const BodyContainer: React.FC<BodyContainerProps> = ({ children, style }) => {\n  const computedCss = useMemo(() => {\n    return css(bodyContainerCss, style)\n  }, [style]);\n\n  return (\n    <div css={computedCss}>\n      { children }\n    </div>\n  );\n}","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { BodyContainer } from './shared/BodyContainer';\n\nconst headerContainerStyle = css({\n  backgroundColor: 'black'\n})\n\nconst headerStyle = css({\n  backgroundColor: 'black',\n  color: 'white',\n  padding: '8px'\n});\n\nconst siteNameTitleStyle = css({\n  fontWeight: 'bold',\n})\n\nexport const Header: React.FC = () => {\n  return (\n    <div css={headerContainerStyle}>\n    <BodyContainer>\n      <header css={headerStyle}>\n          <span css={siteNameTitleStyle}>TRPG table roller</span>: A tool to create multi table rollers\n      </header>\n    </BodyContainer>\n    </div>\n  );\n}","import { AnyAction } from \"../../types/anyAction\";\nimport { RPGGenerator } from \"../../types/Generator\";\nimport { Table } from \"../../types/Table\";\nimport { GeneratorActionTypes } from \"./generatorActionTypes\";\n\nexport const addTableAction = (table: Table):AnyAction => {\n  return {\n    type: GeneratorActionTypes.ADD_TABLE,\n    payload: table,\n  }\n}\n\nexport const removeTableAction = (tableIndex: number): AnyAction => {\n  return {\n    type: GeneratorActionTypes.REMOVE_TABLE,\n    payload: {\n      tableIndex\n    }\n  }\n}\n\nexport const addTableEntryAction = (tableEntry: string, tableIndex: number): AnyAction => {\n  return {\n    type: GeneratorActionTypes.ADD_TABLE_ENTRY,\n    payload: {\n      tableIndex,\n      tableEntry\n    }\n  }\n}\n\nexport const removeTableEntryAction = (tableIndex: number, tableEntryIndex: number): AnyAction => {\n  return {\n    type: GeneratorActionTypes.REMOVE_TABLE_ENTRY,\n    payload: {\n      tableIndex,\n      tableEntryIndex\n    }\n  }\n}\n\nexport const changeTableEntryAction = (tableEntry: string, tableIndex: number, tableEntryIndex: number): AnyAction => {\n  return {\n    type: GeneratorActionTypes.CHANGE_TABLE_ENTRY,\n    payload: {\n      tableEntry,\n      tableIndex,\n      tableEntryIndex,\n    }\n  }\n}\n\nexport const changeGeneratorNameAction = (generatorName: string): AnyAction => {\n  return {\n    type: GeneratorActionTypes.CHANGE_GENERATOR_NAME,\n    payload: {\n      generatorName\n    }\n  }\n}\n\nexport const changeTextTemplateAction = (textTemplate: string): AnyAction => {\n  return {\n    type: GeneratorActionTypes.CHANGE_TEXT_TEMPLATE,\n    payload: {\n      textTemplate\n    }\n  }\n}\n\nexport const changeTableNameAction = (tableName: string, tableIndex: number): AnyAction => {\n  return {\n    type: GeneratorActionTypes.CHANGE_TABLE_NAME,\n    payload: {\n      tableName,\n      tableIndex\n    }\n  }\n}\n\nexport const updateStateFromFileAction = (fileState: Record<string, RPGGenerator>) => {\n  return {\n    type: GeneratorActionTypes.UPDATE_STATE_FROM_FILE,\n    payload: {\n      fileState\n    }\n  }\n}\n\nexport const addToHistory = (tableRollResult: string) => {\n  return {\n    type: GeneratorActionTypes.ADD_TO_HISTORY,\n    payload: {\n      tableRollResult\n    }\n  }\n}\n\nexport const clearHistory = () => {\n  return {\n    type: GeneratorActionTypes.CLEAR_HISTORY,\n  }\n}\n","export const inputHeight = '24px';\nexport const inputWidth = '24px';\nexport const inputLeftPadding = '20px';\n\nexport const backgroundForRed = '#f9f5ec';\n\n// https://mycolor.space/?hex=%23FECCCB&sub=1\n\nexport const redScheme = {\n  highlightPallette: {\n    primary: '#FECCCB', // main color, good\n    secondary: '#EF616C', // highlight color, good\n    blue: '#0090B5', // blue\n\n    light: '#FFF6F6', // light, too red want more yellow biege\n    dark: '#2F2C23' // dark, good I like the off black\n  }\n}","/** @jsx jsx */\nimport { css, jsx, SerializedStyles } from '@emotion/react'\nimport { useMemo } from 'react';\nimport { redScheme } from '../../constants/styleConstants';\n\ninterface SecondaryButtonProps {\n  style?: SerializedStyles;\n  onClick?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n}\n\nconst secondaryButtonStyle = css({\n  border: 'none',\n  backgroundColor: redScheme.highlightPallette.blue,\n  color: 'white',\n  width: 'auto',\n  padding: '8px',\n  margin: '16px 0',\n})\n\nexport const SecondaryButton: React.FC<SecondaryButtonProps> = ({\n  style,\n  children,\n  onClick,\n}) => {\n  const computedStyle = useMemo(() => css(secondaryButtonStyle, style), [style])\n  return (\n    <button css={computedStyle} onClick={onClick} >{children}</button>\n  );\n}","import { useContext, useCallback } from \"react\";\nimport { DispatchContext } from \"../App\";\nimport React from 'react'\nimport { clearHistory } from \"../state/generator/generatorActions\";\nimport { SecondaryButton } from \"./shared/SecondaryButton\";\n\nexport const ClearHistory: React.FC = () => {\n  const dispatch = useContext(DispatchContext);\n  const clearRollToHistory = useCallback(() => dispatch(clearHistory()), [dispatch]);\n  return (\n    <SecondaryButton onClick={clearRollToHistory}>Clear Roll History</SecondaryButton>\n  );\n}","import { AnyAction } from \"../../types/anyAction\";\nimport { RPGGenerator } from \"../../types/Generator\";\nimport { GeneratorActionTypes } from \"./generatorActionTypes\";\nimport { getGeneratorSection } from \"./generatorSelectors\";\n\nexport const generatorStateKey: string = 'generator';\n\nexport const generatorInitialState: RPGGenerator = {\n  generatorName: '',\n  textTemplate: '',\n  tables: [{\n    name: '',\n    entries: ['']\n  }],\n  operations: [],\n  history: [],\n  version: 1,\n}\n\nexport const generatorReducer = (state: RPGGenerator = generatorInitialState, action: AnyAction) => {\n  const newState: RPGGenerator = JSON.parse(JSON.stringify(state));\n  // clear error\n  // try action\n  // catch error\n\n  switch (action.type) {\n    case GeneratorActionTypes.UPDATE_STATE_FROM_FILE: {\n      const { fileState } = action.payload;\n      return getGeneratorSection(fileState);\n    }\n    case GeneratorActionTypes.CHANGE_TEXT_TEMPLATE: {\n      const { textTemplate } = action.payload;\n      newState.textTemplate = textTemplate;\n      return newState;\n    }\n    case GeneratorActionTypes.CHANGE_GENERATOR_NAME: {\n      const { generatorName } = action.payload;\n      newState.generatorName = generatorName;\n      return newState;\n    }\n    case GeneratorActionTypes.ADD_TABLE: {\n      const newTable = action.payload;\n      newState.tables.push(newTable);\n      return newState;\n    }\n    case GeneratorActionTypes.REMOVE_TABLE: {\n      const { tableIndex } = action.payload;\n      newState.tables = [\n        ...newState.tables.filter((_v, i: number) => i !== tableIndex)\n      ]\n      return newState;\n    }\n    case GeneratorActionTypes.CHANGE_TABLE_NAME: {\n      const {\n        tableName,\n        tableIndex,\n      } =  action.payload;\n      newState.tables[tableIndex].name = tableName;\n      return newState;\n    }\n    case GeneratorActionTypes.ADD_TABLE_ENTRY: {\n      const {\n        tableIndex,\n        tableEntry,\n      } = action.payload;\n      newState.tables[tableIndex].entries.push(tableEntry);\n      return newState;\n    }\n    case GeneratorActionTypes.REMOVE_TABLE_ENTRY: {\n      const {\n        tableIndex,\n        tableEntryIndex,\n      } = action.payload;\n      newState.tables[tableIndex].entries = [\n        ...newState.tables[tableIndex].entries.filter((_v, i: number) => i !== tableEntryIndex)\n      ]\n      return newState;\n    }\n    case GeneratorActionTypes.CHANGE_TABLE_ENTRY: {\n      const {\n        tableEntry,\n        tableIndex,\n        tableEntryIndex,\n      } = action.payload;\n      newState.tables[tableIndex].entries[tableEntryIndex] = tableEntry;\n      return newState;\n    }\n    case GeneratorActionTypes.ADD_TO_HISTORY: {\n      const { tableRollResult } = action.payload;\n      newState.history.push(tableRollResult);\n      return newState;\n    }\n    case GeneratorActionTypes.CLEAR_HISTORY: {\n      newState.history = [];\n      return newState;\n    }\n    default:\n      return newState;\n  }\n}","import { generatorStateKey } from './generatorReducer';\nimport { AppState } from '../rootInitialState';\n\nexport const getGeneratorSection = (state: AppState) => state[generatorStateKey];\nexport const getGeneratorName = (state: AppState) => getGeneratorSection(state).generatorName;\nexport const getGeneratorTables = (state: AppState) => getGeneratorSection(state).tables;\nexport const getGeneratorTextTemplate = (state: AppState): string => getGeneratorSection(state).textTemplate;\nexport const getGeneratorHistory = (state: AppState): string[] => getGeneratorSection(state).history;\n","import { saveAs } from 'file-saver';\nimport { AppState } from '../state/rootInitialState';\n\nlet canSave = false;\ntry {\n  canSave = !!new Blob;\n} catch (e) {\n  console.error(e)\n}\n\nexport const saveFile = (data: string[], name: string): void => {\n  if (!canSave) {\n    throw new Error('cannot save file');\n  }\n  const blob = new Blob(data, { type: \"text/plain;charset=utf-8\" });\n  saveAs(blob, name)\n}\n\nexport const transformStateForFile = (state: AppState): string[] => {\n  const stateToString = JSON.stringify(state, null, 2);\n  return [stateToString];\n}\n","/** @jsx jsx */\nimport { css, jsx, SerializedStyles } from '@emotion/react'\nimport { useMemo } from 'react';\nimport { redScheme } from '../../constants/styleConstants';\n\ninterface PrimaryButtonProps {\n  style?: SerializedStyles;\n  onClick?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n}\n\nconst primaryButtonStyle = css({\n  border: 'none',\n  backgroundColor: redScheme.highlightPallette.secondary,\n  color: 'white',\n  width: 'auto',\n  padding: '8px',\n  margin: '16px 0',\n})\n\nexport const PrimaryButton: React.FC<PrimaryButtonProps> = ({\n  style,\n  children,\n  onClick,\n}) => {\n  const computedStyle = useMemo(() => css(primaryButtonStyle, style), [style])\n  return (\n    <button css={computedStyle} onClick={onClick} >{children}</button>\n  );\n}","import React, { useContext, useCallback } from \"react\";\nimport { StateContext } from \"../App\";\nimport { getGeneratorName } from \"../state/generator/generatorSelectors\";\nimport { AppState } from \"../state/rootInitialState\";\nimport { saveFile, transformStateForFile } from \"../utils/saveFile\";\nimport { PrimaryButton } from \"./shared/PrimaryButton\";\n\nexport const ExportDataButton: React.FC = () => {\n  const state: AppState = useContext(StateContext);\n\n  const generatorName = getGeneratorName(state);\n  const exportData = useCallback(() => {\n    saveFile(transformStateForFile(state), `${generatorName}-tables`);\n  }, [state]);\n\n  return (\n    <PrimaryButton onClick={exportData}>Export Table</PrimaryButton>\n  );\n}","import { ChangeEvent } from \"react\";\n\nexport const uploadInputId = 'upload';\n\nexport const getFile = (callback: Function) => (event: ChangeEvent<HTMLInputElement>) => {\n  const input = event.target;\n  if ('files' in input && (input.files || []).length > 0) {\n    readFileContent((input.files || [])[0])\n      .then((content) => callback(convertContentToObj(content as string)))\n      .catch(error => console.log(error))\n  }\n}\n\nexport const convertContentToObj = (content: string) => {\n  return JSON.parse(content);\n}\n\nexport const readFileContent = (file: Blob) => {\n  const reader = new FileReader()\n  return new Promise((resolve, reject) => {\n    reader.onload = event => resolve(event?.target?.result)\n    reader.onerror = error => reject(error)\n    reader.readAsText(file)\n  })\n}","/** @jsx jsx */\nimport { css, jsx } from '@emotion/react'\nimport { useCallback, useContext } from \"react\";\nimport { DispatchContext } from \"../App\";\nimport { updateStateFromFileAction } from \"../state/generator/generatorActions\";\nimport { getFile, uploadInputId } from \"../utils/uploadFile\";\n\nconst uploadStyle = css({\n  margin: '16px',\n})\n\nexport const FileUploadInput: React.FC = () => {\n  const dispatch = useContext(DispatchContext);\n\n  const updateStateFromFile = useCallback((content) => dispatch(updateStateFromFileAction(content)), []);\n  const getFileHandler = useCallback(getFile(updateStateFromFile), [updateStateFromFile]);\n  return (\n    <input id={uploadInputId} css={uploadStyle} type=\"file\" onChange={getFileHandler}></input>\n  );\n}","/** @jsx jsx */\nimport { jsx, SerializedStyles } from '@emotion/react';\nimport { ChangeEvent } from 'react';\n\nexport interface UserInputProps {\n  value: string;\n  style?: SerializedStyles;\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n  placeHolder?: string;\n  onKeyDown?: (e: React.KeyboardEvent) => void,\n  tabIndex?: number,\n}\n\nexport const UserInput: React.FC<UserInputProps> = ({\n  value = '',\n  style,\n  onChange,\n  placeHolder = '',\n  onKeyDown,\n  tabIndex\n}) => {\n  return (\n    <input tabIndex={tabIndex} onKeyDown={onKeyDown} value={value} css={style} onChange={onChange} placeholder={placeHolder}/>\n  );\n}","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { useMemo } from 'react';\nimport { inputHeight, inputLeftPadding } from '../../constants/styleConstants';\nimport { UserInput, UserInputProps } from \"./UserInput\";\n\nconst inputHoverStyle = css({\n  borderBottom: '1px solid black',\n  // backgroundColor: '#F5F5F5',\n  height: inputHeight,\n  padding: `0 0 0 ${inputLeftPadding}`\n})\n\nconst baseUserInputPrimaryStyle = css({\n  border: 'none',\n  outline: 'none',\n  '&:hover,&:focus': inputHoverStyle,\n  height: inputHeight,\n  padding: `0 0 1px ${inputLeftPadding}`\n})\n\nexport const UserInputPrimary: React.FC<UserInputProps> = ({\n  value,\n  style,\n  onChange,\n  placeHolder,\n  onKeyDown,\n  tabIndex,\n}) => {\n  const computedStyle = useMemo(() => css(baseUserInputPrimaryStyle, style), [style]);\n\n  return (\n    <UserInput onKeyDown={onKeyDown} value={value} style={computedStyle} onChange={onChange} placeHolder={placeHolder} />\n  );\n}","import { SerializedStyles } from \"@emotion/react\";\nimport React, { ChangeEvent, useCallback, useContext } from \"react\";\nimport { DispatchContext } from \"../App\";\nimport { StateContext } from \"../App\";\nimport { changeGeneratorNameAction } from \"../state/generator/generatorActions\";\nimport { getGeneratorName } from \"../state/generator/generatorSelectors\";\nimport { AppState } from \"../state/rootInitialState\";\nimport { UserInputPrimary } from \"./shared/UserInputPrimary\";\n\nexport interface GeneratorNameProps {\n  style?: SerializedStyles\n}\nexport const GeneratorName: React.FC<GeneratorNameProps> = ({\n  style\n}) => {\n  const state: AppState = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n\n  const generatorName = getGeneratorName(state);\n  const changeGeneratorNameTemplate = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    dispatch(changeGeneratorNameAction(value));\n  }, [dispatch]);\n\n  return (\n    <UserInputPrimary value={generatorName} style={style} onChange={changeGeneratorNameTemplate} placeHolder='Table Generator name'/>\n  )\n}","/** @jsx jsx */\nimport { css, jsx } from '@emotion/react';\nimport React, { useContext } from 'react';\nimport { StateContext } from '../App';\nimport { getGeneratorHistory } from '../state/generator/generatorSelectors';\nimport { AppState } from '../state/rootInitialState';\n\nconst historyEntryStyle = css({\n  display: 'block',\n  margin: '8px',\n  fontStyle: 'italic',\n});\n\nexport const HistoryList: React.FC = () => {\n  const state: AppState = useContext(StateContext);\n  const historyEntries = getGeneratorHistory(state);\n  return (\n    <div>\n      { historyEntries\n        .map((rollEntry: string, i: number) => (<span css={historyEntryStyle} key={i}>{ rollEntry }</span>))\n        .reverse()\n      }\n    </div>\n  );\n};","import { RPGGenerator } from '../types/Generator';\nimport { generatorStateKey } from './generator/generatorReducer';\n\nexport const exampleDataState: Record<string, RPGGenerator> = {\n  [generatorStateKey]: {\n    generatorName: 'Potion Maker',\n    textTemplate: 'A {{1}} that {{2}} {{3}}. If ingested it will {{4}}, but will also {{5}}.',\n    tables: [{\n      name: 'Bottle Type',\n      entries: [\n        'clear glass bottle',\n        'sqaure green container',\n        'topped drinking horn',\n        'old corked wine bottle',\n        'clay jug with an old cork',\n        'small vial',\n        'ceramic Elven vase'\n      ]\n    },\n      {\n        name: 'Smell',\n        entries: [\n          'smells putrid',\n          'stings your nose when opened',\n          'smells like flowers',\n          'has an acrid smell permeating the container',\n          'smells like dung'\n        ]\n      },\n      {\n        name: 'Look',\n        entries: [\n          'and looks worse than it smells',\n          ' with a green liquid magically bubbling',\n          'but is clear'\n        ]\n      },\n      {\n        name: 'Positive Effect',\n        entries: [\n          'make the drinker immune to fire',\n          'give the consumer the ability to breath water',\n          'mend the bones of the consumer',\n          'expels poisons and venom from the body',\n          'induces a hypnotic trance',\n          'causes hardened plates to grow over the skin',\n          `randomly changes the drinker's appearance`,\n          `enhances the drinker's vision`,\n          'makes a random sense sensitive to magic fields',\n          'heals minor cuts and bruises',\n          'reduces the gravity affecting the drinker'\n        ]\n      },\n      {\n        name: 'Negative Effect',\n        entries: [\n          `turn the the drinker's skin strange colors`,\n          `cause immense strain on the body`,\n          'make the consumer break out in hives',\n          'make the user sensitive to loud noises',\n          `severely reduce the drinker's coordination`,\n          `make the drinker temporarily blind`,\n          'magically fix the drinker on the spot'\n        ]\n      }],\n    operations: [],\n    history: [\n      'A ceramic Elven vase that smells like dung and looks worse than it smells. If ingested it will reduces the gravity affecting the drinker, but will also make the consumer break out in hives.'\n    ],\n    version: 1,\n  },\n}\n","import React, { useCallback } from \"react\"\nimport { useContext } from \"react\"\nimport { DispatchContext } from \"../App\"\nimport { exampleDataState } from \"../state/exampleDataState\"\nimport { updateStateFromFileAction } from \"../state/generator/generatorActions\"\nimport { SecondaryButton } from \"./shared/SecondaryButton\"\n\nexport const LoadExampleDataButton: React.FC = () => {\n  const dispatch = useContext(DispatchContext);\nconst loadExampleDataHandler = useCallback( () => {\n  dispatch(updateStateFromFileAction(exampleDataState))\n  }, []);\n  return (\n    <SecondaryButton onClick={loadExampleDataHandler}>Load Example Data</SecondaryButton>\n  )\n}","export const templateDelimiter = (index: string | number) => `{{${index}}}`;\nexport const regexDelimiter = (index: string | number) => `\\\\\\{\\\\\\{${index}\\\\\\}\\\\\\}`;","import { regexDelimiter, templateDelimiter } from \"../../constants/templateDelimiter\";\nimport { Table } from \"../../types/Table\";\nimport { AppState } from \"../rootInitialState\";\nimport { getGeneratorTables, getGeneratorTextTemplate } from \"./generatorSelectors\";\n\nexport const getRandomArbitrary = (min:number, max:number):number => {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport const getRandomEntryFromArray = (entries: string[]): string => {\n  const randomIndex = getRandomArbitrary(0, entries.length);\n  return entries[randomIndex];\n}\n\nexport const getRandomEntries = (state: AppState): string[] => {\n  const tables = getGeneratorTables(state);\n\n  return tables.map((table: Table) => {\n    return getRandomEntryFromArray(table.entries);\n  })\n}\n\nexport const getResult = (state: AppState): string => {\n  const entries = getRandomEntries(state);\n  const template = getGeneratorTextTemplate(state);\n\n  if (template) {\n    return entries.reduce((result, value, index) => {\n      const delimitedText = templateDelimiter(index + 1);\n      if (result.includes(delimitedText)) {\n        const regex = new RegExp(`${regexDelimiter(index + 1)}`, 'g');\n        return result.replace(regex, value);\n      }\n      return result;\n    }, template);\n  }\n\n  return entries.reduce((result, value) => {\n    return `${result} ${value}`\n  }, '');\n};\n\nexport const getTextTemplatePreview = (state: AppState): string => {\n  const tables = getGeneratorTables(state);\n  const template = getGeneratorTextTemplate(state);\n\n  return tables.reduce((result, table, index) => {\n    const delimitedText = templateDelimiter(index + 1);\n    if (result.includes(delimitedText)) {\n      const regex = new RegExp(`${regexDelimiter(index + 1)}`, 'g');\n      return result.replace(regex, templateDelimiter(table.name));\n    }\n    return result;\n  }, template);\n}","import React from 'react'\nimport { useContext, useCallback } from \"react\";\nimport { DispatchContext } from '../App';\nimport { StateContext } from \"../App\";\nimport { addToHistory } from \"../state/generator/generatorActions\";\nimport { getResult } from \"../state/generator/rollSelectors\";\nimport { AppState } from \"../state/rootInitialState\";\nimport { PrimaryButton } from './shared/PrimaryButton';\n\nexport const RollOnTableButton: React.FC = () => {\n  const state: AppState = useContext(StateContext)\n  const dispatch = useContext(DispatchContext);\n\n  const pushRollToHistory = useCallback(() => dispatch(addToHistory(getResult(state))), [state]);\n  return (\n    <PrimaryButton onClick={pushRollToHistory}>Roll on Table</PrimaryButton>\n  )\n}","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { useMemo } from 'react';\n\nconst sectionCss = css([\n  {\n    display: 'grid',\n  }])\n\ninterface SectionProps {\n  layout?: any\n}\n\nexport const Section: React.FC<SectionProps> = ({ children, layout }) => {\n  const computedCss = useMemo(() => {\n    return css`\n      ${sectionCss}\n      ${layout}\n    `\n  }, [layout]);\n\n  return (\n    <section css={computedCss}>\n      { children}\n    </section>\n  );\n}\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react';\nimport { useMemo } from 'react';\n\nconst subLayoutCss = css([\n  {\n    display: 'grid',\n  }]);\n\ninterface SubLayoutProps {\n  layout?: any;\n}\n\nexport const SubLayout: React.FC<SubLayoutProps> = ({ children, layout }) => {\n  const computedCss = useMemo(() => {\n    return css`\n      ${subLayoutCss}\n      ${layout}\n    `\n  }, [layout]);\n\n  return (\n    <div css={computedCss}>\n      { children }\n    </div>\n  );\n}","import React from 'react'\nimport { ChangeEvent, useCallback, useContext } from 'react';\nimport { DispatchContext } from '../App';\nimport { addTableEntryAction, changeTableEntryAction, changeTableNameAction, removeTableEntryAction } from '../state/generator/generatorActions';\nimport { Table } from '../types/Table';\nimport { TableStaterenderProps } from './layouts/TableLayout';\n\nexport interface TableProps {\n  table: Table;\n  tableIndex: number;\n  render: any;\n}\n\nexport const TableComponent: React.FC<TableProps>= ({ table, tableIndex, render }) => {\n  const dispatch = useContext(DispatchContext);\n\n  const tableName = table.name;\n  const tableEntries = table.entries;\n\n  const updateTableName = useCallback((event: ChangeEvent<HTMLInputElement>): void => {\n    const tableNameValue = event.target.value;\n    return dispatch(changeTableNameAction(tableNameValue, tableIndex));\n  }, [tableIndex, dispatch]);\n\n  const updateTableEntry = useCallback((TableEntryIndex: number) => (event: ChangeEvent<HTMLInputElement>): void => {\n    const tableEntryValue = event.target.value;\n    return dispatch(changeTableEntryAction(tableEntryValue, tableIndex, TableEntryIndex));\n  }, [tableIndex, dispatch]);\n\n  const removeTableEntry = useCallback((TableEntryIndex: number) => (_e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    return dispatch(removeTableEntryAction(tableIndex, TableEntryIndex));\n  }, [tableIndex, dispatch]);\n\n  const addTableEntry = useCallback((): void => {\n    return dispatch(addTableEntryAction('', tableIndex));\n  }, [tableIndex, dispatch]);\n\n  const handleLastEntryEnterKey = useCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      return dispatch(addTableEntryAction('', tableIndex));\n    }\n  }, [tableIndex, dispatch])\n\n  const tableState: TableStaterenderProps = {\n    tableName,\n    updateTableName,\n    tableEntries: tableEntries.map((entry: string, i: number) => ({\n      value: entry,\n      changeEntry: updateTableEntry(i),\n      entryIndex: i,\n      removeEntry: removeTableEntry(i),\n    })),\n    addTableEntry,\n    handleLastEntryEnterKey,\n  }\n\n  return render(tableState)\n}\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { ChangeEvent, useMemo } from 'react'\nimport { templateDelimiter } from '../../constants/templateDelimiter'\nimport { SubLayout } from '../shared/SubLayout';\nimport { UserInputPrimary } from '../shared/UserInputPrimary';\n\nconst tableNameLayout = css({\n  gridTemplateColumns: `16fr 1fr 1fr`,\n  gridTemplateRows: `auto`,\n  margin: '18px 0 0 0',\n})\n\nconst tableDiceStyle = css({\n  gridColumnStart: 2,\n  gridColumnEnd: 3,\n  gridRow: 1,\n  justifySelf: 'center',\n  fontWeight: 'bold',\n})\n\nconst tableNameInputStyle = css({\n  gridColumnStart: 1,\n  gridColumnEnd: 2,\n  gridRow: 1,\n  fontSize: '18px',\n  padding: '0 0 3px 0',\n  '&:hover,&:focus': {\n    padding: '0 0 2px 0',\n  },\n  fontWeight: 'bold',\n});\n\nconst tableSymbolStyle = css({\n  gridColumnStart: 3,\n  gridColumnEnd: 4,\n  gridRow: 1,\n  color: '#757575',\n  justifySelf: 'center',\n});\n\nexport interface TableNameLayoutProps {\n  tableName: string;\n  updateTableName: (event: ChangeEvent<HTMLInputElement>) => void;\n  tableLength: number;\n  tableIndex: number;\n}\n\nexport const TableNameLayout: React.FC<TableNameLayoutProps> = ({\n  tableName,\n  updateTableName,\n  tableLength,\n  tableIndex,\n}) => {\n  const tableSymbol = useMemo(() => templateDelimiter(tableIndex + 1), [tableIndex])\n\n  return (\n    <SubLayout layout={tableNameLayout}>\n      <UserInputPrimary value={tableName} style={tableNameInputStyle} onChange={updateTableName} placeHolder='Table name' />\n      <div css={tableDiceStyle}>{`d${tableLength}`}</div>\n      <div css={tableSymbolStyle}>{tableSymbol}</div>\n    </SubLayout>\n  )\n}","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { ChangeEvent, useCallback, useContext } from \"react\";\nimport { DispatchContext } from '../../App';\nimport { inputHeight, inputWidth, redScheme } from '../../constants/styleConstants';\nimport { removeTableAction } from '../../state/generator/generatorActions';\nimport { Table } from \"../../types/Table\";\nimport { PrimaryButton } from '../shared/PrimaryButton';\nimport { SecondaryButton } from '../shared/SecondaryButton';\nimport { SubLayout } from \"../shared/SubLayout\";\nimport { UserInputPrimary } from '../shared/UserInputPrimary';\nimport { TableComponent } from \"../Table\";\nimport { TableNameLayout } from './TableNameLayout';\n\nexport interface TableEntryProps {\n  value: string,\n  changeEntry: (event: ChangeEvent<HTMLInputElement>) => void,\n  entryIndex: number,\n  removeEntry: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void,\n}\n\nexport interface TableStaterenderProps {\n  tableName: string,\n  updateTableName: (event: ChangeEvent<HTMLInputElement>) => void,\n  tableEntries: TableEntryProps[]\n  addTableEntry: () => void\n  handleLastEntryEnterKey: (e: React.KeyboardEvent) => void\n}\n\nexport interface TableComponentLayoutProps {\n  table: Table,\n  tableIndex: number,\n}\n\nconst IndividualTableGrid = css({\n  gridTemplateColumns: `1fr ${inputWidth}`,\n  gridTemplateRows: `1fr`,\n});\n\nconst tableNameStyle = css({\n  gridColumnStart: 1,\n  gridColumnEnd: 3,\n  gridRow: 1,\n})\n\nconst tableButtons = css({\n  gridColumnStart: 1,\n  gridColumnEnd: 3,\n})\n\nconst removeTableButton = css({\n  float: 'right',\n})\n\nconst removeButtonStyle = css({\n  border: 'none',\n  outline: 'none',\n  appearance: 'none',\n  backgroundColor: 'transparent',\n  '&:hover,&:focus': {},\n  // height: `${inputHeight} + 1px`,\n  padding: '0 0 1px 0'\n});\n\nconst coloredEntryStyle = css({\n  backgroundColor: redScheme.highlightPallette.primary,\n})\n\nexport const TableComponentLayout: React.FC<TableComponentLayoutProps> = ({ table, tableIndex }) => {\n  const dispatch = useContext(DispatchContext);\n  const removeTable = useCallback(() => dispatch(removeTableAction(tableIndex)), [tableIndex]);\n\n  return (\n    <TableComponent table={table} tableIndex={tableIndex} render={({\n      tableName,\n      updateTableName,\n      tableEntries,\n      addTableEntry,\n      handleLastEntryEnterKey\n    }: TableStaterenderProps) => (\n        <SubLayout layout={IndividualTableGrid}>\n          <div css={tableNameStyle}><TableNameLayout tableName={tableName} updateTableName={updateTableName} tableLength={table.entries.length} tableIndex={tableIndex} /></div>\n          { tableEntries.map(({ value, changeEntry, entryIndex, removeEntry }: TableEntryProps) => {\n            const addStyle = entryIndex % 2 ? coloredEntryStyle : undefined;\n            let onKeyDown\n            if (entryIndex + 1 === tableEntries.length) {\n              onKeyDown = handleLastEntryEnterKey;\n            }\n            return [\n              <UserInputPrimary tabIndex={entryIndex} onKeyDown={onKeyDown} style={addStyle} value={value} onChange={changeEntry} key={`table-entry-${entryIndex}`} placeHolder='Entry text'/>,\n              <button css={css(removeButtonStyle, addStyle)} onClick={removeEntry} key={`close-table-entry-${entryIndex}`}>X</button>\n            ];\n          })}\n          <div css={tableButtons}>\n            <PrimaryButton onClick={addTableEntry} >Add Table Entry</PrimaryButton>\n            <SecondaryButton style={removeTableButton} onClick={removeTable} >Remove Table</SecondaryButton>\n          </div>\n        </SubLayout>\n      )} />\n  )\n}\n","import React, { useContext } from \"react\";\nimport { StateContext } from \"../App\";\nimport { getGeneratorTables } from \"../state/generator/generatorSelectors\";\nimport { AppState } from \"../state/rootInitialState\";\nimport { Table } from '../types/Table';\nimport { TableComponentLayout } from \"./layouts/TableLayout\";\n\nexport const TableList = () => {\n  const state: AppState = useContext(StateContext);\n  const tables = getGeneratorTables(state) || [];\n\n  return <>\n    {tables.map((tableEntry: Table, i: number) =>\n      <TableComponentLayout table={tableEntry} tableIndex={i} key={`table${i}`}/>\n    )}\n  </>\n}\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { useContext, useCallback } from 'react'\nimport { DispatchContext } from '../../App'\nimport { addTableAction } from '../../state/generator/generatorActions'\nimport { emptyTable } from '../../utils/emptyTable'\nimport { PrimaryButton } from '../shared/PrimaryButton'\nimport { SubLayout } from \"../shared/SubLayout\"\nimport { TableList } from \"../TableList\"\n\nconst addTableButton = css({\n  margin: '0 auto'\n})\nexport const TableListLayout: React.FC = () => {\n  const dispatch = useContext(DispatchContext);\n  const addTable = useCallback(() => dispatch(addTableAction(emptyTable())), []);\n\n  return (\n    <SubLayout>\n      <TableList />\n      <div css={addTableButton}>\n        <PrimaryButton onClick={addTable}>Add Table</PrimaryButton>\n      </div>\n    </SubLayout>\n  )\n}","import { Table } from \"../types/Table\";\n\nexport const emptyTable = (): Table => ({\n  name: '',\n  entries: [''],\n});","import { SerializedStyles } from \"@emotion/react\";\nimport React, { useContext, useCallback, ChangeEvent } from \"react\";\nimport { StateContext, DispatchContext } from \"../App\";\nimport { changeTextTemplateAction } from \"../state/generator/generatorActions\";\nimport { getGeneratorTextTemplate } from \"../state/generator/generatorSelectors\";\nimport { AppState } from \"../state/rootInitialState\";\nimport { UserInputPrimary } from \"./shared/UserInputPrimary\";\n\nexport interface TextTemplateProps {\n  style?: SerializedStyles\n}\n\nexport const TextTemplate: React.FC<TextTemplateProps> = ({\n  style\n}) => {\n  const state: AppState = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n\n  const textTemplate = getGeneratorTextTemplate(state);\n\n  const changeTextTemplate = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    dispatch(changeTextTemplateAction(value));\n  }, [dispatch]);\n\n  return (<UserInputPrimary value={textTemplate} style={style} onChange={changeTextTemplate} placeHolder='Text template, use {{1}} to insert result'/>);\n}","/** @jsx jsx */\nimport { jsx, css, SerializedStyles } from '@emotion/react'\nimport { useContext, useMemo } from \"react\";\nimport { StateContext } from \"../../App\";\nimport { getTextTemplatePreview } from '../../state/generator/rollSelectors';\nimport { AppState } from \"../../state/rootInitialState\";\nimport { TextTemplate } from \"../TextTemplate\";\n\nconst textTemplateContainerStyle = css({\n  width: '100%'\n})\n\nconst textTemplateInputStyle = css({\n  width: 'calc(100% - 20px)',\n  marginBottom: '2px',\n});\n\nconst previewStyle = css({\n  height: '55px',\n  overflow: 'scroll'\n});\n\nconst textTemplateTitleStyle = css({\n  fontSize: '18px',\n  margin: '16px 0',\n});\n\nexport interface TextTemplateLayoutProps {\n  style?: SerializedStyles\n}\n\nexport const TextTemplateLayout: React.FC<TextTemplateLayoutProps> = ({ style }) => {\n  const state: AppState = useContext(StateContext)\n  const preview = getTextTemplatePreview(state);\n\n  const computedStyle = useMemo(() => {\n    return css(style, textTemplateContainerStyle);\n  }, [style])\n\n  return (\n    <div css={computedStyle}>\n      <div css={textTemplateTitleStyle}>Roll result template</div>\n      <TextTemplate style={textTemplateInputStyle}/>\n      <div css={previewStyle} >preview: {preview}</div>\n    </div>\n  );\n}","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { ClearHistory } from '../ClearHistory';\nimport { ExportDataButton } from '../ExportDataButton';\nimport { FileUploadInput } from '../FileUploadInput';\nimport { GeneratorName } from '../GeneratorName';\nimport { HistoryList } from '../HistoryList';\nimport { LoadExampleDataButton } from '../LoadExampleDataButton';\nimport { RollOnTableButton } from '../RollOnTableButton';\nimport { BodyContainer } from '../shared/BodyContainer';\nimport { Section } from '../shared/Section';\nimport { SubLayout } from '../shared/SubLayout';\nimport { TableListLayout } from './TableListLayout';\nimport { TextTemplateLayout } from './TextTemplateLayout'\n\nconst generatorNameLayout = css({\n  gridColumn: 1,\n  gridRow: 1,\n});\nconst tableListSectionLayout = css({\n  gridColumn: 1,\n  gridRow: 2,\n});\nconst textTemplateLayoutStyles = css({\n  gridColumnStart: 1,\n  gridColumnEnd: 4,\n  gridRow: 1,\n});\nconst rollOnTableButtonLayout = css({\n  gridColumnStart: 1,\n  gridColumnEnd: 3,\n  gridRow: 2,\n});\nconst rollResultLayout = css({\n  gridColumnStart: 2,\n  gridColumnEnd: 4,\n  gridRow: 2,\n  fontSize: '18px',\n  margin: '16px 0',\n})\nconst historyListLayout = css({\n  gridColumnStart: 1,\n  gridColumnEnd: 4,\n  gridRow: 3,\n});\nconst exportDataButtonLayout = css({\n  gridColumn: 1,\n  gridRow: 4,\n});\nconst fileUploadInputLayout = css({\n  gridColumn: 2,\n  gridRow: 4,\n  justifySelf: 'middle'\n});\nconst clearHistoryLayout = css({\n  gridColumn: 3,\n  gridRow: 4,\n  justifySelf: 'end'\n});\nconst loadExampleDataLayout = css({\n  gridColumn: 1,\n  gridRow: 5,\n});\n\nconst pageLayout = css({\n  gridTemplateColumns: `1fr 1fr`,\n  gridTemplateRows: 'auto',\n  columnGap: '12px'\n})\n\nconst tableGridLayout = css({\n  gridTemplateColumns: `1fr`,\n  gridTemplateRows: '65px auto',\n});\n\nconst resultGridLayout = css({\n  gridTemplateColumns: `1fr 1fr 1fr `,\n  gridTemplateRows: 'auto auto 1fr auto',\n})\n\nconst generatorNameStyles = css({\n  width: '100%',\n  fontSize: '30px',\n  padding: '0 0 5px 0',\n  margin: '36px 0 0 0',\n  '&:hover,&:focus': {\n    padding: '0 0 4px 0',\n  },\n  fontWeight: 'bold',\n});\n\nexport const BasePageLayout: React.FC = () => {\n  return (\n    <BodyContainer>\n      <Section layout={pageLayout}>\n        <SubLayout layout={tableGridLayout}>\n        <div css={generatorNameLayout}><GeneratorName style={generatorNameStyles}/></div>\n        <div css={tableListSectionLayout}><TableListLayout /></div>\n        </SubLayout>\n        <SubLayout layout={resultGridLayout}>\n        <TextTemplateLayout style={textTemplateLayoutStyles} />\n        <div css={rollOnTableButtonLayout}><RollOnTableButton /></div>\n        <div css={rollResultLayout}>Table Roll Results:</div>\n        <div css={historyListLayout}><HistoryList /></div>\n        <div css={exportDataButtonLayout}><ExportDataButton /></div>\n        <div css={fileUploadInputLayout}><FileUploadInput /></div>\n        <div css={clearHistoryLayout}><ClearHistory /></div>\n          <div css={loadExampleDataLayout}><LoadExampleDataButton /></div>\n        </SubLayout>\n      </Section>\n    </BodyContainer>\n  );\n}\n","import { RPGGenerator } from \"../types/Generator\";\nimport { generatorInitialState, generatorStateKey } from \"./generator/generatorReducer\";\n\nexport const rootInitialState: Record<string, RPGGenerator> = {\n  [generatorStateKey]: generatorInitialState,\n}\n\nexport type AppState = typeof rootInitialState;","import { combineReducers } from \"../utils/combineReducers\";\nimport { generatorReducer, generatorStateKey } from \"./generator/generatorReducer\";\n\nexport const rootReducer = combineReducers({\n  [generatorStateKey]: generatorReducer,\n});\n","\nimport { AppState, rootInitialState } from \"../state/rootInitialState\";\nimport { AnyAction } from \"../types/anyAction\";\n\nexport type AnyReducer = (state: any, action: AnyAction) => any;\n\nexport interface CombinedReducers {\n  [key: string]: AnyReducer\n}\n\nexport function combineReducers(reducers: CombinedReducers) {\n  return (state: any = rootInitialState, action: AnyAction): AppState => {\n    const newState: Record<string, any> = {};\n    Object.keys(reducers).forEach((key: string) => {\n      newState[key] = reducers[key](state[key], action);\n    })\n    return newState as AppState;\n  }\n}","/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React, { useReducer } from 'react';\nimport { Header } from './components/Header';\nimport { BasePageLayout } from './components/layouts/BasePageLayout';\nimport { rootInitialState } from './state/rootInitialState';\nimport { rootReducer } from './state/rootReducer';\nimport { defaultDispatch } from './utils/defaultDispatch';\n\nexport const StateContext = React.createContext(rootInitialState);\nexport const DispatchContext = React.createContext(defaultDispatch);\n\nconst App = () => {\n  const [state, dispatch] = useReducer(rootReducer, rootInitialState);\n\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StateContext.Provider value={state}>\n        <Header />\n        <BasePageLayout />\n      </StateContext.Provider>\n    </DispatchContext.Provider>\n  );\n}\n\nexport default App;\n","export const defaultDispatch = (action: { type: string }) => {\n  throw new Error('Context consumer provided with default dispatch ' + action.type)\n  return;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}