{"version":3,"sources":["state/generator/generatorActionTypes.ts","components/shared/BodyContainer.tsx","components/Header.tsx","state/generator/generatorActions.ts","constants/styleConstants.ts","components/shared/SecondaryButton.tsx","components/ClearHistory.tsx","state/generator/generatorReducer.ts","state/generator/generatorSelectors.ts","components/shared/GridCell.tsx","components/shared/SubLayout.tsx","components/shared/UserInput.tsx","components/ConditionalRollTableRow.tsx","components/shared/PrimaryButton.tsx","components/ConditionalRollTable.tsx","utils/saveFile.ts","components/ExportDataButton.tsx","utils/uploadFile.ts","components/FileUploadInput.tsx","components/shared/UserInputPrimary.tsx","components/GeneratorName.tsx","components/HistoryList.tsx","state/exampleDataState.ts","components/LoadBasicExampleDataButton.tsx","constants/templateDelimiter.ts","state/generator/rollSelectors.ts","utils/extractIndexFromDelimiter.ts","components/BasicRollOnTableButton.tsx","components/shared/Section.tsx","components/shared/TabSkeleton.tsx","components/Table.tsx","components/layouts/TableNameLayout.tsx","components/layouts/TableLayout.tsx","components/TableList.tsx","components/layouts/TableListLayout.tsx","utils/emptyTable.ts","components/TextTemplate.tsx","components/layouts/TextTemplateLayout.tsx","components/ConditionalRollOnTableButton.tsx","components/LoadConditionalExampleDataButton.tsx","components/layouts/BasePageLayout.tsx","state/rootInitialState.ts","state/rootReducer.ts","utils/combineReducers.ts","App.tsx","utils/defaultDispatch.ts","reportWebVitals.js","index.js"],"names":["GeneratorActionTypes","bodyContainerCss","css","maxWidth","margin","display","flexDirection","BodyContainer","children","style","computedCss","useMemo","headerContainerStyle","backgroundColor","headerStyle","color","padding","siteNameTitleStyle","fontWeight","Header","addTableEntryAction","tableEntry","tableIndex","type","ADD_TABLE_ENTRY","payload","updateStateFromFileAction","fileState","UPDATE_STATE_FROM_FILE","addToHistoryAction","tableRollResult","ADD_TO_HISTORY","redScheme","primary","secondary","blue","light","dark","secondaryButtonStyle","border","width","SecondaryButton","onClick","computedStyle","ClearHistory","dispatch","useContext","DispatchContext","clearRollToHistory","useCallback","CLEAR_HISTORY","generatorInitialState","generatorName","textTemplate","tables","name","entries","operations","history","version","getGeneratorSection","state","getGeneratorName","getGeneratorTables","getGeneratorTextTemplate","getGeneratorConditionalOperations","GridCell","styles","position","gridStyle","gridColumn","col","gridRow","row","gridColumnStart","cstart","gridColumnEnd","cend","gridRowStart","rstart","gridRowEnd","rend","subLayoutCss","SubLayout","layout","UserInput","value","onChange","placeHolder","onKeyDown","tabIndex","placeholder","conditionalRowStyle","gridTemplateColumns","gridTemplateRows","removeConditionButtonStyle","ConditionalRollTableRow","currentTableIndex","entryIndexs","nextTableIndex","updateConditionalOperation","removeConditionalOperation","entriesIndexesHandler","e","target","match","updateConditionalOperationHandler","operationKey","primaryButtonStyle","PrimaryButton","defaultOperation","conditionalRollLayout","rowGap","addConditionButtonStyle","marginTop","ConditionalRollTable","StateContext","conditionalOperations","index","operation","operationIndex","operationAttributes","CHANGE_CONDITIONAL_OPERATION","REMOVE_CONDITIONAL_OPERATION","addConditionalOperation","ADD_CONDITIONAL_OPERATION","map","canSave","Blob","console","error","ExportDataButton","exportData","data","Error","blob","saveAs","saveFile","JSON","stringify","transformStateForFile","convertContentToObj","content","parse","readFileContent","file","reader","FileReader","Promise","resolve","reject","onload","event","result","onerror","readAsText","uploadStyle","FileUploadInput","callback","updateStateFromFile","getFileHandler","input","files","length","then","catch","log","id","inputHoverStyle","borderBottom","height","baseUserInputPrimaryStyle","outline","UserInputPrimary","GeneratorName","changeGeneratorNameTemplate","CHANGE_GENERATOR_NAME","changeGeneratorNameAction","historyEntryStyle","fontStyle","HistoryList","historyEntries","getGeneratorHistory","rollEntry","i","key","reverse","basicExampleDataState","conditionalExampleDataState","LoadBasicExampleDataButton","loadExampleDataHandler","templateDelimiter","regexDelimiter","getRandomEntryFromArray","list","min","max","randomNumber","Math","floor","random","getRandomEntryFromTable","getRandomEntries","_table","getResultWithoutTemplate","reduce","getMultiRollResult","template","delimiter","RegExp","split","templatePiece","removeRegex","strippedText","replace","parseInt","extractIndexFromDelimiter","join","normalizeConditionalOperations","entry","filter","isNaN","acc","firstMatch","BasicRollOnTableButton","pushRollToHistory","sectionCss","Section","tabLayoutStyle","tabHeaderStyle","columnGap","TabSkeleton","tabs","initialTab","useState","setTabIndex","getButtonGridPositionStyle","tab","component","TableComponent","table","render","tableName","tableEntries","updateTableName","tableNameValue","CHANGE_TABLE_NAME","changeTableNameAction","updateTableEntry","TableEntryIndex","tableEntryValue","tableEntryIndex","CHANGE_TABLE_ENTRY","changeTableEntryAction","removeTableEntry","_e","REMOVE_TABLE_ENTRY","removeTableEntryAction","addTableEntry","handleLastEntryEnterKey","changeEntry","entryIndex","removeEntry","tableNameLayout","tableDiceStyle","justifySelf","tableNameInputStyle","fontSize","tableSymbolStyle","TableNameLayout","tableLength","tableSymbol","IndividualTableGrid","tableNameStyle","tableButtons","removeTableButton","float","removeButtonStyle","appearance","coloredEntryStyle","tableNumberStyle","lineHeight","textAlign","TableComponentLayout","removeTable","REMOVE_TABLE","removeTableAction","addStyle","undefined","TableList","addTableButton","TableListLayout","addTable","ADD_TABLE","TextTemplate","changeTextTemplate","CHANGE_TEXT_TEMPLATE","changeTextTemplateAction","textTemplateContainerStyle","textTemplateInputStyle","marginBottom","previewStyle","overflow","textTemplateTitleStyle","TextTemplateLayout","preview","delimitedText","includes","regex","getTextTemplatePreview","ConditionalRollOnTableButton","finalResult","rollIndex","normalizedOperations","firstEntry","safetyCounter","currentEntry","alert","getConditionalRollResult","LoadConditionalExampleDataButton","textTemplateLayoutStyles","pageLayout","tableGridLayout","basicRollGridLayout","conditionalRollGridLayout","generatorNameStyles","BasePageLayout","rootInitialState","reducers","rootReducer","action","newState","newTable","push","_v","Object","keys","forEach","React","createContext","App","useReducer","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b20e1977.chunk.js","sourcesContent":["export enum GeneratorActionTypes {\n  CHANGE_TEXT_TEMPLATE = '@generator/CHANGE_TEXT_TEMPLATE',\n  CHANGE_GENERATOR_NAME = '@generator/CHANGE_GENERATOR_NAME',\n  ADD_TABLE = '@generator/ADD_TABLE',\n  REMOVE_TABLE = '@generator/REMOVE_TABLE',\n\n  CHANGE_TABLE_NAME = '@table/CHANGE_TABLE_NAME',\n  ADD_TABLE_ENTRY = '@table/ADD_TABLE_ENTRY',\n  REMOVE_TABLE_ENTRY = '@table/REMOVE_TABLE_ENTRY',\n  CHANGE_TABLE_ENTRY = '@table/CHANGE_TABLE_ENTRY',\n\n  UPDATE_STATE_FROM_FILE = '@app/UPDATE_STATE_FROM_FILE',\n  ADD_TO_HISTORY = '@history/ADD_TO_HISTORY',\n  CLEAR_HISTORY = '@history/CLEAR_HISTORY',\n\n  ADD_CONDITIONAL_OPERATION = '@operation/ADD_CONDITIONAL_OPERATION',\n  REMOVE_CONDITIONAL_OPERATION = '@operation/REMOVE_CONDITIONAL_OPERATION',\n  CHANGE_CONDITIONAL_OPERATION = '@operation/CHANGE_CONDITIONAL_OPERATION',\n}","/** @jsx jsx */\nimport { jsx, css, SerializedStyles } from \"@emotion/react\";\nimport { useMemo } from \"react\";\n\nconst bodyContainerCss = css({\n  maxWidth: '1200px',\n  margin: '0 auto',\n  display: 'flex',\n  flexDirection: 'column',\n});\n\nexport interface BodyContainerProps {\n  style?: SerializedStyles\n}\n\nexport const BodyContainer: React.FC<BodyContainerProps> = ({ children, style }) => {\n  const computedCss = useMemo(() => {\n    return css(bodyContainerCss, style)\n  }, [style]);\n\n  return (\n    <div css={computedCss}>\n      { children }\n    </div>\n  );\n}","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { BodyContainer } from './shared/BodyContainer';\n\nconst headerContainerStyle = css({\n  backgroundColor: 'black'\n})\n\nconst headerStyle = css({\n  backgroundColor: 'black',\n  color: 'white',\n  padding: '0.5rem'\n});\n\nconst siteNameTitleStyle = css({\n  fontWeight: 'bold',\n})\n\nexport const Header: React.FC = () => {\n  return (\n    <div css={headerContainerStyle}>\n    <BodyContainer>\n      <header css={headerStyle}>\n          <span css={siteNameTitleStyle}>TRPG table roller</span>: A tool to create multi table rollers\n      </header>\n    </BodyContainer>\n    </div>\n  );\n}","import { AnyAction } from \"../../types/anyAction\";\nimport { RPGGenerator, TableOperation } from \"../../types/Generator\";\nimport { Table } from \"../../types/Table\";\nimport { GeneratorActionTypes } from \"./generatorActionTypes\";\n\nexport const addTableAction = (table: Table):AnyAction => ({\n    type: GeneratorActionTypes.ADD_TABLE,\n    payload: table,\n})\n\nexport const removeTableAction = (tableIndex: number): AnyAction => ({\n    type: GeneratorActionTypes.REMOVE_TABLE,\n    payload: {\n      tableIndex\n    }\n})\n\nexport const addTableEntryAction = (tableEntry: string, tableIndex: number): AnyAction => ({\n    type: GeneratorActionTypes.ADD_TABLE_ENTRY,\n    payload: {\n      tableIndex,\n      tableEntry\n    }\n})\n\nexport const removeTableEntryAction = (tableIndex: number, tableEntryIndex: number): AnyAction => ({\n    type: GeneratorActionTypes.REMOVE_TABLE_ENTRY,\n    payload: {\n      tableIndex,\n      tableEntryIndex\n    }\n})\n\nexport const changeTableEntryAction = (tableEntry: string, tableIndex: number, tableEntryIndex: number): AnyAction => ({\n    type: GeneratorActionTypes.CHANGE_TABLE_ENTRY,\n    payload: {\n      tableEntry,\n      tableIndex,\n      tableEntryIndex,\n    }\n})\n\nexport const changeGeneratorNameAction = (generatorName: string): AnyAction => ({\n    type: GeneratorActionTypes.CHANGE_GENERATOR_NAME,\n    payload: {\n      generatorName\n    }\n})\n\nexport const changeTextTemplateAction = (textTemplate: string): AnyAction => ({\n    type: GeneratorActionTypes.CHANGE_TEXT_TEMPLATE,\n    payload: {\n      textTemplate\n    }\n})\n\nexport const changeTableNameAction = (tableName: string, tableIndex: number): AnyAction => ({\n    type: GeneratorActionTypes.CHANGE_TABLE_NAME,\n    payload: {\n      tableName,\n      tableIndex\n    }\n})\n\nexport const updateStateFromFileAction = (fileState: Record<string, RPGGenerator>) => ({\n    type: GeneratorActionTypes.UPDATE_STATE_FROM_FILE,\n    payload: {\n      fileState\n    }\n})\n\nexport const addToHistoryAction = (tableRollResult: string) => ({\n    type: GeneratorActionTypes.ADD_TO_HISTORY,\n    payload: {\n      tableRollResult\n    }\n})\n\nexport const clearHistoryAction = () => ({\n    type: GeneratorActionTypes.CLEAR_HISTORY,\n})\n\nexport const addConditionalOperationAction = (operationAttributes: TableOperation) => ({\n  type: GeneratorActionTypes.ADD_CONDITIONAL_OPERATION,\n  payload: { operationAttributes: { ...operationAttributes } }\n});\n\nexport const removeConditionalOperationAction = (operationIndex: number) => ({\n  type: GeneratorActionTypes.REMOVE_CONDITIONAL_OPERATION,\n  payload: {\n    operationIndex,\n  }\n});\n\nexport const changeConditionalOperationAction = (operationIndex: number, operationAttributes: TableOperation) => ({\n  type: GeneratorActionTypes.CHANGE_CONDITIONAL_OPERATION,\n  payload: {\n    operationIndex,\n    operationAttributes: { ...operationAttributes }\n  }\n});\n","export const inputHeight = '24px';\nexport const inputWidth = '24px';\nexport const inputLeftPadding = '20px';\n\nexport const backgroundForRed = '#f9f5ec';\n\n// https://mycolor.space/?hex=%23FECCCB&sub=1\n\nexport const redScheme = {\n  highlightPallette: {\n    primary: '#FECCCB', // main color, good\n    secondary: '#EF616C', // highlight color, good\n    blue: '#0090B5', // blue\n\n    light: '#FFF6F6', // light, too red want more yellow biege\n    dark: '#2F2C23' // dark, good I like the off black\n  }\n}","/** @jsx jsx */\nimport { css, jsx, SerializedStyles } from '@emotion/react'\nimport { useMemo } from 'react';\nimport { redScheme } from '../../constants/styleConstants';\n\ninterface SecondaryButtonProps {\n  style?: SerializedStyles;\n  onClick?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n}\n\nconst secondaryButtonStyle = css({\n  border: 'none',\n  backgroundColor: redScheme.highlightPallette.blue,\n  color: 'white',\n  width: 'auto',\n  padding: '0.5rem',\n  margin: '1rem 0',\n})\n\nexport const SecondaryButton: React.FC<SecondaryButtonProps> = ({\n  style,\n  children,\n  onClick,\n}) => {\n  const computedStyle = useMemo(() => css(secondaryButtonStyle, style), [style])\n  return (\n    <button css={computedStyle} onClick={onClick} >{children}</button>\n  );\n}","import { useContext, useCallback } from \"react\";\nimport { DispatchContext } from \"../App\";\nimport React from 'react'\nimport { clearHistoryAction } from \"../state/generator/generatorActions\";\nimport { SecondaryButton } from \"./shared/SecondaryButton\";\n\nexport const ClearHistory: React.FC = () => {\n  const dispatch = useContext(DispatchContext);\n  const clearRollToHistory = useCallback(() => dispatch(clearHistoryAction()), [dispatch]);\n  return (\n    <SecondaryButton onClick={clearRollToHistory}>Clear Roll History</SecondaryButton>\n  );\n}","import { AnyAction } from \"../../types/anyAction\";\nimport { RPGGenerator, TableOperation } from \"../../types/Generator\";\nimport { GeneratorActionTypes } from \"./generatorActionTypes\";\nimport { getGeneratorSection } from \"./generatorSelectors\";\n\nexport const generatorStateKey: string = 'generator';\n\nexport const generatorInitialState: RPGGenerator = {\n  generatorName: '',\n  textTemplate: '',\n  tables: [{\n    name: '',\n    entries: ['']\n  }],\n  operations: [],\n  history: [],\n  version: 1,\n}\n\nexport const generatorReducer = (state: RPGGenerator = generatorInitialState, action: AnyAction) => {\n  const newState: RPGGenerator = JSON.parse(JSON.stringify(state));\n  // clear error\n  // try action\n  // catch error\n\n  switch (action.type) {\n    case GeneratorActionTypes.UPDATE_STATE_FROM_FILE: {\n      const { fileState } = action.payload;\n      return getGeneratorSection(fileState);\n    }\n    case GeneratorActionTypes.CHANGE_TEXT_TEMPLATE: {\n      const { textTemplate } = action.payload;\n      newState.textTemplate = textTemplate;\n      return newState;\n    }\n    case GeneratorActionTypes.CHANGE_GENERATOR_NAME: {\n      const { generatorName } = action.payload;\n      newState.generatorName = generatorName;\n      return newState;\n    }\n\n    // tables\n    case GeneratorActionTypes.ADD_TABLE: {\n      const newTable = action.payload;\n      newState.tables.push(newTable);\n      return newState;\n    }\n    case GeneratorActionTypes.REMOVE_TABLE: {\n      const { tableIndex } = action.payload;\n      newState.tables = [\n        ...newState.tables.filter((_v, i: number) => i !== tableIndex)\n      ]\n      return newState;\n    }\n\n    case GeneratorActionTypes.CHANGE_TABLE_NAME: {\n      const {\n        tableName,\n        tableIndex,\n      } =  action.payload;\n      newState.tables[tableIndex].name = tableName;\n      return newState;\n    }\n\n    // table entries\n    case GeneratorActionTypes.ADD_TABLE_ENTRY: {\n      const {\n        tableIndex,\n        tableEntry,\n      } = action.payload;\n      newState.tables[tableIndex].entries.push(tableEntry);\n      return newState;\n    }\n    case GeneratorActionTypes.REMOVE_TABLE_ENTRY: {\n      const {\n        tableIndex,\n        tableEntryIndex,\n      } = action.payload;\n      newState.tables[tableIndex].entries = [\n        ...newState.tables[tableIndex].entries.filter((_v, i: number) => i !== tableEntryIndex)\n      ]\n      return newState;\n    }\n    case GeneratorActionTypes.CHANGE_TABLE_ENTRY: {\n      const {\n        tableEntry,\n        tableIndex,\n        tableEntryIndex,\n      } = action.payload;\n      newState.tables[tableIndex].entries[tableEntryIndex] = tableEntry;\n      return newState;\n    }\n\n    // histories\n    case GeneratorActionTypes.ADD_TO_HISTORY: {\n      const { tableRollResult } = action.payload;\n      newState.history.push(tableRollResult);\n      return newState;\n    }\n    case GeneratorActionTypes.CLEAR_HISTORY: {\n      newState.history = [];\n      return newState;\n    }\n\n    // conditional roll operations\n    case GeneratorActionTypes.ADD_CONDITIONAL_OPERATION: {\n      const operation: TableOperation = action.payload.operationAttributes;\n      newState.operations.push(operation);\n      return newState;\n    }\n    case GeneratorActionTypes.REMOVE_CONDITIONAL_OPERATION: {\n      const { operationIndex } = action.payload;\n\n      newState.operations = [\n        ...newState.operations.filter((_v, i: number) => i !== operationIndex)\n      ]\n      return newState;\n    }\n    case GeneratorActionTypes.CHANGE_CONDITIONAL_OPERATION: {\n      const { operationIndex, operationAttributes } = action.payload;\n\n      newState.operations[operationIndex] = operationAttributes;\n      return newState;\n    }\n\n    default:\n      return newState;\n  }\n}","import { generatorStateKey } from './generatorReducer';\nimport { AppState } from '../rootInitialState';\nimport { TableOperation } from '../../types/Generator';\n\nexport const getGeneratorSection = (state: AppState) => state[generatorStateKey];\nexport const getGeneratorName = (state: AppState) => getGeneratorSection(state).generatorName;\nexport const getGeneratorTables = (state: AppState) => getGeneratorSection(state).tables;\nexport const getGeneratorTextTemplate = (state: AppState): string => getGeneratorSection(state).textTemplate;\nexport const getGeneratorHistory = (state: AppState): string[] => getGeneratorSection(state).history;\nexport const getGeneratorConditionalOperations = (state: AppState): TableOperation[] => getGeneratorSection(state).operations;","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/react\";\nimport { useMemo } from \"react\";\n\n\ninterface GridCellProps {\n  position?: {\n    col?: number;\n    row?: number;\n    cstart?: number;\n    cend?: number;\n    rstart?: number;\n    rend?: number;\n  }\n  styles?: Record<string, any>;\n}\n\nexport const GridCell: React.FC<GridCellProps> = ({ styles, position = {}, children }) => {\n  const gridStyle = useMemo(() => css({\n    gridColumn: position.col,\n    gridRow: position.row,\n    gridColumnStart: position.cstart,\n    gridColumnEnd: position.cend,\n    gridRowStart: position.rstart,\n    gridRowEnd: position.rend,\n    ...styles,\n  }), [styles, position, children]);\n  return (<div css={gridStyle}>{ children }</div>);\n}\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react';\nimport { useMemo } from 'react';\n\nconst subLayoutCss = css([\n  {\n    display: 'grid',\n  }]);\n\ninterface SubLayoutProps {\n  layout?: any;\n}\n\nexport const SubLayout: React.FC<SubLayoutProps> = ({ children, layout }) => {\n  const computedCss = useMemo(() => {\n    return css`\n      ${subLayoutCss}\n      ${layout}\n    `\n  }, [layout]);\n\n  return (\n    <div css={computedCss}>\n      { children }\n    </div>\n  );\n}","/** @jsx jsx */\nimport { jsx, SerializedStyles } from '@emotion/react';\nimport { ChangeEvent } from 'react';\n\nexport interface UserInputProps {\n  value: string | number;\n  style?: SerializedStyles;\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\n  placeHolder?: string;\n  onKeyDown?: (e: React.KeyboardEvent) => void,\n  tabIndex?: number,\n}\n\nexport const UserInput: React.FC<UserInputProps> = ({\n  value = '',\n  style,\n  onChange,\n  placeHolder = '',\n  onKeyDown,\n  tabIndex\n}) => {\n  return (\n    <input tabIndex={tabIndex} onKeyDown={onKeyDown} value={value} css={style} onChange={onChange} placeholder={placeHolder}/>\n  );\n}","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport React, { ChangeEvent, useCallback } from \"react\";\nimport { TableOperation } from '../types/Generator';\nimport { GridCell } from './shared/GridCell';\nimport { SecondaryButton } from './shared/SecondaryButton';\nimport { SubLayout } from \"./shared/SubLayout\";\nimport { UserInput } from \"./shared/UserInput\";\n\nconst conditionalRowStyle = css({\n  gridTemplateColumns: `1fr 1fr 1fr 1fr`,\n  gridTemplateRows: 'auto',\n})\n\nconst removeConditionButtonStyle = css({\n  margin: '0'\n})\n\ninterface ConditionalRollTableRowProps {\n  currentTableIndex: string;\n  entryIndexs: string;\n  nextTableIndex: string;\n  updateConditionalOperation: (operation: TableOperation) => void;\n  removeConditionalOperation: () => void;\n}\n\nconst entriesIndexesInputPattern = '^[0-9 ,]*$';\nconst tableIndexInputPattern = '^[0-9]*$';\n\nexport const ConditionalRollTableRow: React.FC<ConditionalRollTableRowProps> = ({\n  currentTableIndex,\n  entryIndexs,\n  nextTableIndex,\n  updateConditionalOperation,\n  removeConditionalOperation,\n}) => {\n\n  const entriesIndexesHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    if (value.match(entriesIndexesInputPattern)) {\n      updateConditionalOperation({\n        currentTableIndex,\n        entryIndexs: value,\n        nextTableIndex,\n      })\n    };\n  }, [currentTableIndex, nextTableIndex, entryIndexs, updateConditionalOperation]);\n\n  const updateConditionalOperationHandler = useCallback((operationKey: string) => (e: ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    if (value.match(tableIndexInputPattern)) {\n      updateConditionalOperation({\n        currentTableIndex,\n        entryIndexs,\n        nextTableIndex,\n        [operationKey]: value\n      })\n    };\n  }, [currentTableIndex, nextTableIndex, entryIndexs, updateConditionalOperation]);\n\n  return (\n    <SubLayout css={conditionalRowStyle}>\n      <GridCell position={{ row: 1, col: 1 }}><span>If Table #:</span></GridCell>\n      <GridCell position={{ row: 1, col: 2 }}><span>Rolls a #:</span></GridCell>\n      <GridCell position={{ row: 1, col: 3 }}><span>Then Roll on table #:</span></GridCell>\n      <GridCell position={{ row: 2, col: 1 }}><UserInput css={{ display: 'inline' }} value={currentTableIndex} onChange={updateConditionalOperationHandler('currentTableIndex')} /></GridCell>\n      <GridCell position={{ row: 2, col: 2 }}><UserInput css={{ display: 'inline' }} value={entryIndexs} onChange={entriesIndexesHandler} /></GridCell>\n      <GridCell position={{ row: 2, col: 3 }}><UserInput css={{ display: 'inline' }} value={nextTableIndex} onChange={updateConditionalOperationHandler('nextTableIndex')} /></GridCell>\n      <GridCell position={{ rstart: 1, rend: 3, col: 4 }}><SecondaryButton style={removeConditionButtonStyle} onClick={removeConditionalOperation}>X</SecondaryButton></GridCell>\n    </SubLayout>\n  );\n}","/** @jsx jsx */\nimport { css, jsx, SerializedStyles } from '@emotion/react'\nimport { useMemo } from 'react';\nimport { redScheme } from '../../constants/styleConstants';\n\ninterface PrimaryButtonProps {\n  style?: SerializedStyles;\n  onClick?: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\n}\n\nconst primaryButtonStyle = css({\n  border: 'none',\n  backgroundColor: redScheme.highlightPallette.secondary,\n  color: 'white',\n  width: 'auto',\n  padding: '0.5rem',\n  margin: '1rem 0',\n})\n\nexport const PrimaryButton: React.FC<PrimaryButtonProps> = ({\n  style,\n  children,\n  onClick,\n}) => {\n  const computedStyle = useMemo(() => css(primaryButtonStyle, style), [style])\n  return (\n    <button css={computedStyle} onClick={onClick} >{children}</button>\n  );\n}","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport React, { useCallback, useContext } from \"react\";\nimport { DispatchContext, StateContext } from \"../App\";\nimport { addConditionalOperationAction, changeConditionalOperationAction, removeConditionalOperationAction } from \"../state/generator/generatorActions\";\nimport { getGeneratorConditionalOperations } from \"../state/generator/generatorSelectors\";\nimport { TableOperation } from \"../types/Generator\";\nimport { ConditionalRollTableRow } from \"./ConditionalRollTableRow\";\nimport { PrimaryButton } from \"./shared/PrimaryButton\";\nimport { SubLayout } from \"./shared/SubLayout\";\n\nconst defaultOperation: TableOperation = {\n  currentTableIndex: '',\n  nextTableIndex: '',\n  entryIndexs: '',\n}\n\nconst conditionalRollLayout = css({\n  rowGap: '1rem'\n});\n\nconst addConditionButtonStyle = css({\n  marginTop: '0'\n})\n\nexport const ConditionalRollTable: React.FC = () => {\n  const state = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n  const conditionalOperations = getGeneratorConditionalOperations(state);\n\n  const updateConditionalOperation = useCallback((index: number) => (operation: TableOperation) => {\n\n      return dispatch(changeConditionalOperationAction(index, operation));\n\n  }, [dispatch]);\n  const removeConditionalOperation = useCallback((index: number) => () => dispatch(removeConditionalOperationAction(index)), [dispatch]);\n  const addConditionalOperation = useCallback(() => dispatch(addConditionalOperationAction(defaultOperation)), [dispatch]);\n\n  return (\n    <SubLayout layout={conditionalRollLayout}>\n        Conditional Roll Operations\n        Roll on table 1 then:\n        { conditionalOperations.map(({ currentTableIndex, entryIndexs, nextTableIndex }: TableOperation, index: number) => (\n          <ConditionalRollTableRow\n            currentTableIndex={currentTableIndex}\n            entryIndexs={entryIndexs}\n            nextTableIndex={nextTableIndex}\n            updateConditionalOperation={updateConditionalOperation(index)}\n            removeConditionalOperation={removeConditionalOperation(index)}\n          />\n        )) }\n      <PrimaryButton style={addConditionButtonStyle} onClick={addConditionalOperation}>Add Operation</PrimaryButton>\n    </SubLayout>\n  );\n}","import { saveAs } from 'file-saver';\nimport { AppState } from '../state/rootInitialState';\n\nlet canSave = false;\ntry {\n  canSave = !!new Blob();\n} catch (e) {\n  console.error(e)\n}\n\nexport const saveFile = (data: string[], name: string): void => {\n  if (!canSave) {\n    throw new Error('cannot save file');\n  }\n  const blob = new Blob(data, { type: \"text/plain;charset=utf-8\" });\n  saveAs(blob, name)\n}\n\nexport const transformStateForFile = (state: AppState): string[] => {\n  const stateToString = JSON.stringify(state, null, 2);\n  return [stateToString];\n}\n","import React, { useContext, useCallback } from \"react\";\nimport { StateContext } from \"../App\";\nimport { getGeneratorName } from \"../state/generator/generatorSelectors\";\nimport { AppState } from \"../state/rootInitialState\";\nimport { saveFile, transformStateForFile } from \"../utils/saveFile\";\nimport { PrimaryButton } from \"./shared/PrimaryButton\";\n\nexport const ExportDataButton: React.FC = () => {\n  const state: AppState = useContext(StateContext);\n\n  const generatorName = getGeneratorName(state);\n  const exportData = useCallback(() => {\n    saveFile(transformStateForFile(state), `${generatorName}-tables`);\n  }, [state]);\n\n  return (\n    <PrimaryButton onClick={exportData}>Export Table</PrimaryButton>\n  );\n}","import { ChangeEvent } from \"react\";\n\nexport const uploadInputId = 'upload';\n\nexport const getFile = (callback: Function) => (event: ChangeEvent<HTMLInputElement>) => {\n  const input = event.target;\n  if ('files' in input && (input.files || []).length > 0) {\n    readFileContent((input.files || [])[0])\n      .then((content) => callback(convertContentToObj(content as string)))\n      .catch(error => console.log(error))\n  }\n}\n\nexport const convertContentToObj = (content: string) => {\n  return JSON.parse(content);\n}\n\nexport const readFileContent = (file: Blob) => {\n  const reader = new FileReader()\n  return new Promise((resolve, reject) => {\n    reader.onload = event => resolve(event?.target?.result)\n    reader.onerror = error => reject(error)\n    reader.readAsText(file)\n  })\n}","/** @jsx jsx */\nimport { css, jsx } from '@emotion/react'\nimport { useCallback, useContext } from \"react\";\nimport { DispatchContext } from \"../App\";\nimport { updateStateFromFileAction } from \"../state/generator/generatorActions\";\nimport { getFile, uploadInputId } from \"../utils/uploadFile\";\n\nconst uploadStyle = css({\n  margin: '1rem',\n})\n\nexport const FileUploadInput: React.FC = () => {\n  const dispatch = useContext(DispatchContext);\n\n  const updateStateFromFile = useCallback((content) => dispatch(updateStateFromFileAction(content)), []);\n  const getFileHandler = useCallback(getFile(updateStateFromFile), [updateStateFromFile]);\n  return (\n    <input id={uploadInputId} css={uploadStyle} type=\"file\" onChange={getFileHandler}></input>\n  );\n}","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { useMemo } from 'react';\nimport { inputHeight, inputLeftPadding } from '../../constants/styleConstants';\nimport { UserInput, UserInputProps } from \"./UserInput\";\n\nconst inputHoverStyle = css({\n  borderBottom: '1px solid black',\n  // backgroundColor: '#F5F5F5',\n  height: inputHeight,\n  padding: `0 0 0 ${inputLeftPadding}`\n})\n\nconst baseUserInputPrimaryStyle = css({\n  border: 'none',\n  outline: 'none',\n  '&:hover,&:focus': inputHoverStyle,\n  height: inputHeight,\n  padding: `0 0 1px ${inputLeftPadding}`\n})\n\nexport const UserInputPrimary: React.FC<UserInputProps> = ({\n  value,\n  style,\n  onChange,\n  placeHolder,\n  onKeyDown,\n  tabIndex,\n}) => {\n  const computedStyle = useMemo(() => css(baseUserInputPrimaryStyle, style), [style]);\n\n  return (\n    <UserInput onKeyDown={onKeyDown} value={value} style={computedStyle} onChange={onChange} placeHolder={placeHolder} />\n  );\n}","import { SerializedStyles } from \"@emotion/react\";\nimport React, { ChangeEvent, useCallback, useContext } from \"react\";\nimport { DispatchContext } from \"../App\";\nimport { StateContext } from \"../App\";\nimport { changeGeneratorNameAction } from \"../state/generator/generatorActions\";\nimport { getGeneratorName } from \"../state/generator/generatorSelectors\";\nimport { AppState } from \"../state/rootInitialState\";\nimport { UserInputPrimary } from \"./shared/UserInputPrimary\";\n\nexport interface GeneratorNameProps {\n  style?: SerializedStyles\n}\nexport const GeneratorName: React.FC<GeneratorNameProps> = ({\n  style\n}) => {\n  const state: AppState = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n\n  const generatorName = getGeneratorName(state);\n  const changeGeneratorNameTemplate = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    dispatch(changeGeneratorNameAction(value));\n  }, [dispatch]);\n\n  return (\n    <UserInputPrimary value={generatorName} style={style} onChange={changeGeneratorNameTemplate} placeHolder='Table Generator name'/>\n  )\n}","/** @jsx jsx */\nimport { css, jsx } from '@emotion/react';\nimport React, { useContext } from 'react';\nimport { StateContext } from '../App';\nimport { getGeneratorHistory } from '../state/generator/generatorSelectors';\nimport { AppState } from '../state/rootInitialState';\n\nconst historyEntryStyle = css({\n  display: 'block',\n  margin: '0.5rem',\n  fontStyle: 'italic',\n});\n\nexport const HistoryList: React.FC = () => {\n  const state: AppState = useContext(StateContext);\n  const historyEntries = getGeneratorHistory(state);\n  return (\n    <div>\n      { historyEntries\n        .map((rollEntry: string, i: number) => (<span css={historyEntryStyle} key={i}>{ rollEntry }</span>))\n        .reverse()\n      }\n    </div>\n  );\n};","import { RPGGenerator } from '../types/Generator';\nimport { generatorStateKey } from './generator/generatorReducer';\n\nexport const basicExampleDataState: Record<string, RPGGenerator> = {\n  [generatorStateKey]: {\n    generatorName: 'Potion Maker',\n    textTemplate: 'A {{1}} that {{2}} {{3}}. If ingested it will {{4}}, but will also {{5}} and {{5}}.',\n    tables: [{\n      name: 'Bottle Type',\n      entries: [\n        'clear glass bottle',\n        'square green container',\n        'topped drinking horn',\n        'old corked wine bottle',\n        'clay jug with an old cork',\n        'small vial',\n        'ceramic Elven vase'\n      ]\n    },\n      {\n        name: 'Smell',\n        entries: [\n          'smells putrid',\n          'stings your nose when opened',\n          'smells like flowers',\n          'has an acrid smell permeating the container',\n          'smells like dung'\n        ]\n      },\n      {\n        name: 'Look',\n        entries: [\n          'and looks worse than it smells',\n          ' with a green liquid magically bubbling',\n          'but is clear'\n        ]\n      },\n      {\n        name: 'Positive Effect',\n        entries: [\n          'make the drinker immune to fire',\n          'give the consumer the ability to breath water',\n          'mend the bones of the consumer',\n          'expels poisons and venom from the body',\n          'induces a hypnotic trance',\n          'causes hardened plates to grow over the skin',\n          `randomly changes the drinker's appearance`,\n          `enhances the drinker's vision`,\n          'makes a random sense sensitive to magic fields',\n          'heals minor cuts and bruises',\n          'reduce the gravity affecting the drinker'\n        ]\n      },\n      {\n        name: 'Negative Effect',\n        entries: [\n          `turn the the drinker's skin strange colors`,\n          `cause immense strain on the body`,\n          'make the consumer break out in hives',\n          'make the user sensitive to loud noises',\n          `severely reduce the drinker's coordination`,\n          `make the drinker temporarily blind`,\n          'magically fix the drinker on the spot'\n        ]\n      }],\n    operations: [],\n    history: [\n      'A ceramic Elven vase that smells like dung and looks worse than it smells. If ingested it will reduce the gravity affecting the drinker, but will also make the consumer break out in hives.'\n    ],\n    version: 1,\n  },\n}\nexport const conditionalExampleDataState: Record<string, RPGGenerator> = {\n  [generatorStateKey]: {\n    \"generatorName\": \"Magic Loot Generator\",\n    \"textTemplate\": \"\",\n    \"tables\": [\n      {\n        \"name\": \"Type of Loot\",\n        \"entries\": [\n          \"Magical Armor\",\n          \"An Enchanted Weapon\",\n          \"Golden Coins\"\n        ]\n      },\n      {\n        \"name\": \"Armor\",\n        \"entries\": [\n          \"that protects against cold \",\n          \"that is supernaturally light \"\n        ]\n      },\n      {\n        \"name\": \"Weapon\",\n        \"entries\": [\n          \"that produces acid on the blade\",\n          \"with a blade wreathed in flame\"\n        ]\n      },\n      {\n        \"name\": \"Coin Amount\",\n        \"entries\": [\n          \"(30)\",\n          \"(10)\",\n          \"(100)\"\n        ]\n      }\n    ],\n    \"operations\": [\n      {\n        \"currentTableIndex\": \"1\",\n        \"entryIndexs\": \"1\",\n        \"nextTableIndex\": \"2\"\n      },\n      {\n        \"currentTableIndex\": \"1\",\n        \"entryIndexs\": \"2\",\n        \"nextTableIndex\": \"3\"\n      },\n      {\n        \"currentTableIndex\": \"1\",\n        \"entryIndexs\": \"3\",\n        \"nextTableIndex\": \"4\"\n      }\n    ],\n    \"history\": [\n      \"Golden Coins(10)\",\n    ],\n    \"version\": 1\n  }\n}\n","import React, { useCallback } from \"react\"\nimport { useContext } from \"react\"\nimport { DispatchContext } from \"../App\"\nimport { basicExampleDataState } from \"../state/exampleDataState\"\nimport { updateStateFromFileAction } from \"../state/generator/generatorActions\"\nimport { SecondaryButton } from \"./shared/SecondaryButton\"\n\nexport const LoadBasicExampleDataButton: React.FC = () => {\n  const dispatch = useContext(DispatchContext);\n  const loadExampleDataHandler = useCallback( () => {\n    dispatch(updateStateFromFileAction(basicExampleDataState))\n  }, [dispatch]);\n  return (\n    <SecondaryButton onClick={loadExampleDataHandler}>Load Example Data</SecondaryButton>\n  )\n}","export const templateDelimiter = (index: string | number) => `{{${index}}}`;\nexport const regexDelimiter = (index: string | number) => `\\\\\\{\\\\\\{${index}\\\\\\}\\\\\\}`;","import { regexDelimiter, templateDelimiter } from \"../../constants/templateDelimiter\";\nimport { TableOperation } from \"../../types/Generator\";\nimport { Table } from \"../../types/Table\";\nimport { extractIndexFromDelimiter } from \"../../utils/extractIndexFromDelimiter\";\nimport { AppState } from \"../rootInitialState\";\nimport { getGeneratorConditionalOperations, getGeneratorTables, getGeneratorTextTemplate } from \"./generatorSelectors\";\n\nexport const getRandomArbitrary = (min:number, max:number):number => {\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport const getRandomEntryFromArray = <T>(list: T[]): { index: number, result: T } => {\n  const randomNumber = getRandomArbitrary(0, list.length);\n  return  {\n    index: randomNumber,\n    result: list[randomNumber]\n  }\n}\n\nexport const getRandomEntryFromTable = (state: AppState, tableIndex: number): string => {\n  const tables = getGeneratorTables(state);\n  const entries = tables[tableIndex].entries;\n\n  return getRandomEntryFromArray(entries).result;\n}\n\nexport const getRandomEntries = (state: AppState): string[] => {\n  const tables = getGeneratorTables(state);\n\n  return tables.map((_table: Table, i: number) => {\n    return getRandomEntryFromTable(state, i);\n  })\n}\n\nexport const getTextTemplatePreview = (state: AppState): string => {\n  const tables = getGeneratorTables(state);\n  const template = getGeneratorTextTemplate(state);\n\n  return tables.reduce((result, table, index) => {\n    const delimitedText = templateDelimiter(index + 1);\n    if (result.includes(delimitedText)) {\n      const regex = new RegExp(`${regexDelimiter(index + 1)}`, 'g');\n      return result.replace(regex, templateDelimiter(table.name));\n    }\n    return result;\n  }, template);\n}\n\n\n// START basic result\nexport const getResultWithoutTemplate = (entries: string[]): string => {\n  return entries.reduce((result, value) => {\n    return `${result} ${value}`\n  }, '');\n}\n\nexport const getResultWithTemplate = (entries: string[], template: string): string => {\n\n  return entries.reduce((result, value, index) => {\n    const delimitedText = templateDelimiter(index + 1);\n    if (result.includes(delimitedText)) {\n      const regex = new RegExp(`${regexDelimiter(index + 1)}`, 'g');\n      return result.replace(regex, value);\n    }\n    return result;\n  }, template);\n}\n\nexport const getResult = (state: AppState): string => {\n  const entries = getRandomEntries(state);\n  const template = getGeneratorTextTemplate(state);\n\n  if (template) {\n    return getResultWithTemplate(entries, template);\n  }\n\n  return getResultWithoutTemplate(entries);\n};\n// END basic result\n\n// START multi roll result\nexport const getMultiRollResult = (state: AppState): string => {\n  const entries = getRandomEntries(state);\n  const template = getGeneratorTextTemplate(state);\n\n  if (template) {\n    const delimiter = new RegExp(`(${regexDelimiter('\\\\d')})`, '');\n    const splitTemplate = template.split(delimiter);\n\n    const populatedTemplate = splitTemplate.map((templatePiece: string): string => {\n      if (templatePiece.match(delimiter)) {\n        const tableIndex = extractIndexFromDelimiter(templatePiece);\n        const result = getRandomEntryFromTable(state, tableIndex);\n        return result\n      }\n      return templatePiece\n    })\n    return populatedTemplate.join('');\n  }\n\n  return getResultWithoutTemplate(entries);\n}\n// END multi roll result\n\n// START conditional roll result\ninterface NormalizedOperation {\n  currentTableIndex: number,\n  entryIndexs: Record<number, true>,\n  nextTableIndex: number,\n}\n\nconst normalizeConditionalOperations = (operation: TableOperation): NormalizedOperation => {\n  const entries = operation.entryIndexs\n    .replace(/ /g, '')\n    .split(',')\n    .map((entry: string) => parseInt(entry, 10))\n    .filter((entry: number) => !isNaN(entry))\n    .map((entry: number) => entry - 1)\n    .reduce((acc: Record<number, true>, entry: number) => {\n        acc[entry] = true\n      return acc;\n    }, {});\n\n  return {\n    currentTableIndex: parseInt(operation.currentTableIndex, 10) - 1,\n    entryIndexs: entries,\n    nextTableIndex: parseInt(operation.nextTableIndex, 10) - 1,\n  }\n}\n\nconst checkOperationTriggered = (choice: number, operation: NormalizedOperation): boolean => {\n  return !!operation.entryIndexs[choice];\n}\n\nconst firstMatch = <T>(list: T[], callback: (e: T) => boolean): { index: number, match: boolean } => {\n  for (let index = 0; index < list.length; index++) {\n    if (callback(list[index])) {\n      return {\n        index,\n        match: true\n      }\n    }\n  }\n  return {\n    index: 0,\n    match: false\n  }\n}\n\nexport const getConditionalRollResult = (state: AppState): string => {\n  const tables = getGeneratorTables(state);\n  const operations = getGeneratorConditionalOperations(state);\n  const normalizedOperations = operations.map(normalizeConditionalOperations);\n  console.log(normalizedOperations);\n  let finalResult: string;\n  let rollIndex: number;\n\n  // roll on the first table (always)\n  let firstEntry = getRandomEntryFromArray(tables[0].entries);\n  finalResult = firstEntry.result;\n  rollIndex = firstEntry.index;\n\n  let currentTableIndex = 0;\n  let safetyCounter = 100;\n\n\n  // loop through the operations and find the first that matches:\n  // current table index = 1 and checkOperationTriggered(rollIndex, operation);\n\n  // get a random entry from the next table index\n  // set the new roll index\n\n  // set the next table index as the current table index\n\n\n\n  // !! NOTE: I'm seeing that the first operation always has to have a current index set to 0 in order to trigger the next\n\n\n  while (!isNaN(currentTableIndex) && safetyCounter > 0) {\n    console.log({\n      currentTableIndex,\n      safetyCounter,\n      finalResult,\n      rollIndex,\n    })\n    safetyCounter--; // prevent likely infinite loop\n\n    const { match, index: operationIndex } = firstMatch(normalizedOperations, (operation: NormalizedOperation) => {\n      return operation.currentTableIndex === currentTableIndex && operation.entryIndexs[rollIndex] // offset for humans\n    });\n    // no match in any of the operations found for the currentTableIndex and rollIndex\n    if (!match) {\n      console.log(`no matches found for table: ${currentTableIndex} and roll: ${rollIndex}`);\n      break;\n    }\n\n    currentTableIndex = normalizedOperations[operationIndex].nextTableIndex; // set to look for next table\n\n    const currentEntry = getRandomEntryFromArray(tables[currentTableIndex].entries);\n    finalResult += currentEntry.result;\n    rollIndex = currentEntry.index;\n  }\n  if (safetyCounter === 0) {\n    alert('infinite loop detected!');\n    return '';\n  }\n\n  return finalResult;\n}\n// END conditional roll result","import { regexDelimiter } from \"../constants/templateDelimiter\";\n\nexport const extractIndexFromDelimiter = (delimiter: string): number => {\n  const removeRegex = new RegExp(`[${regexDelimiter('')}]`, 'g');\n  const strippedText = delimiter.replace(removeRegex, '');\n  return parseInt(strippedText, 10) - 1;\n}","import React from 'react'\nimport { useContext, useCallback } from \"react\";\nimport { DispatchContext } from '../App';\nimport { StateContext } from \"../App\";\nimport { addToHistoryAction } from \"../state/generator/generatorActions\";\nimport { getMultiRollResult } from \"../state/generator/rollSelectors\";\nimport { AppState } from \"../state/rootInitialState\";\nimport { PrimaryButton } from './shared/PrimaryButton';\n\nexport const BasicRollOnTableButton: React.FC = () => {\n  const state: AppState = useContext(StateContext)\n  const dispatch = useContext(DispatchContext);\n\n  const pushRollToHistory = useCallback(() => dispatch(addToHistoryAction(getMultiRollResult(state))), [state, dispatch]);\n  return (\n    <PrimaryButton onClick={pushRollToHistory}>Roll on Table</PrimaryButton>\n  )\n}","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { useMemo } from 'react';\n\nconst sectionCss = css([\n  {\n    display: 'grid',\n  }])\n\ninterface SectionProps {\n  layout?: any\n}\n\nexport const Section: React.FC<SectionProps> = ({ children, layout }) => {\n  const computedCss = useMemo(() => {\n    return css`\n      ${sectionCss}\n      ${layout}\n    `\n  }, [layout]);\n\n  return (\n    <section css={computedCss}>\n      { children}\n    </section>\n  );\n}\n","/** @jsx jsx */\nimport { jsx, css } from \"@emotion/react\";\nimport { useCallback, useState } from \"react\";\nimport { PrimaryButton } from \"./PrimaryButton\";\nimport { SecondaryButton } from \"./SecondaryButton\";\nimport { SubLayout } from \"./SubLayout\";\n\nexport interface Tab {\n  component: React.ReactNode;\n  name: string;\n}\n\ninterface TabSkeletonProps {\n  tabs: Tab[];\n  initialTab?: number;\n}\n\nconst tabLayoutStyle = css({\n  gridTemplateColumns: `1fr`,\n  gridTemplateRows: '63px auto',\n});\n\nconst tabHeaderStyle = css({\n  display: 'grid',\n  columnGap: '1rem',\n});\n\nexport const TabSkeleton: React.FC<TabSkeletonProps> = ({ tabs, initialTab = 0 }) => {\n  const [tabIndex, setTabIndex] = useState(initialTab);\n\n  const getButtonGridPositionStyle = useCallback((index: number) => css({\n    gridRow: 1,\n    gridColumn: index + 1\n  }), [])\n\n  return (\n    <SubLayout layout={tabLayoutStyle}>\n        <div css={tabHeaderStyle}>{ tabs.map((tab: Tab, index) => {\n          const style = getButtonGridPositionStyle(index);\n          if (index === tabIndex) {\n            return (<PrimaryButton style={style} onClick={() => setTabIndex(index)} >\n              { tab.name}\n            </PrimaryButton>);\n          }\n          return (<SecondaryButton style={style} onClick={() => setTabIndex(index)} >\n              { tab.name }\n          </SecondaryButton>);\n          }) }\n        </div>\n        { tabs[tabIndex].component }\n      </SubLayout>\n  );\n}","import React from 'react'\nimport { ChangeEvent, useCallback, useContext } from 'react';\nimport { DispatchContext } from '../App';\nimport { addTableEntryAction, changeTableEntryAction, changeTableNameAction, removeTableEntryAction } from '../state/generator/generatorActions';\nimport { Table } from '../types/Table';\nimport { TableStaterenderProps } from './layouts/TableLayout';\n\nexport interface TableProps {\n  table: Table;\n  tableIndex: number;\n  render: any;\n}\n\nexport const TableComponent: React.FC<TableProps>= ({ table, tableIndex, render }) => {\n  const dispatch = useContext(DispatchContext);\n\n  const tableName = table.name;\n  const tableEntries = table.entries;\n\n  const updateTableName = useCallback((event: ChangeEvent<HTMLInputElement>): void => {\n    const tableNameValue = event.target.value;\n    return dispatch(changeTableNameAction(tableNameValue, tableIndex));\n  }, [tableIndex, dispatch]);\n\n  const updateTableEntry = useCallback((TableEntryIndex: number) => (event: ChangeEvent<HTMLInputElement>): void => {\n    const tableEntryValue = event.target.value;\n    return dispatch(changeTableEntryAction(tableEntryValue, tableIndex, TableEntryIndex));\n  }, [tableIndex, dispatch]);\n\n  const removeTableEntry = useCallback((TableEntryIndex: number) => (_e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    return dispatch(removeTableEntryAction(tableIndex, TableEntryIndex));\n  }, [tableIndex, dispatch]);\n\n  const addTableEntry = useCallback((): void => {\n    return dispatch(addTableEntryAction('', tableIndex));\n  }, [tableIndex, dispatch]);\n\n  const handleLastEntryEnterKey = useCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      return dispatch(addTableEntryAction('', tableIndex));\n    }\n  }, [tableIndex, dispatch])\n\n  const tableState: TableStaterenderProps = {\n    tableName,\n    updateTableName,\n    tableEntries: tableEntries.map((entry: string, i: number) => ({\n      value: entry,\n      changeEntry: updateTableEntry(i),\n      entryIndex: i,\n      removeEntry: removeTableEntry(i),\n    })),\n    addTableEntry,\n    handleLastEntryEnterKey,\n  }\n\n  return render(tableState)\n}\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { ChangeEvent, useMemo } from 'react'\nimport { templateDelimiter } from '../../constants/templateDelimiter'\nimport { SubLayout } from '../shared/SubLayout';\nimport { UserInputPrimary } from '../shared/UserInputPrimary';\n\nconst tableNameLayout = css({\n  gridTemplateColumns: `16fr 1fr 1fr`,\n  gridTemplateRows: `auto`,\n  margin: '18px 0 0 0',\n})\n\nconst tableDiceStyle = css({\n  gridColumnStart: 2,\n  gridColumnEnd: 3,\n  gridRow: 1,\n  justifySelf: 'center',\n  fontWeight: 'bold',\n})\n\nconst tableNameInputStyle = css({\n  gridColumnStart: 1,\n  gridColumnEnd: 2,\n  gridRow: 1,\n  fontSize: '18px',\n  padding: '0 0 3px 0',\n  '&:hover,&:focus': {\n    padding: '0 0 2px 0',\n  },\n  fontWeight: 'bold',\n});\n\nconst tableSymbolStyle = css({\n  gridColumnStart: 3,\n  gridColumnEnd: 4,\n  gridRow: 1,\n  color: '#757575',\n  justifySelf: 'center',\n});\n\nexport interface TableNameLayoutProps {\n  tableName: string;\n  updateTableName: (event: ChangeEvent<HTMLInputElement>) => void;\n  tableLength: number;\n  tableIndex: number;\n}\n\nexport const TableNameLayout: React.FC<TableNameLayoutProps> = ({\n  tableName,\n  updateTableName,\n  tableLength,\n  tableIndex,\n}) => {\n  const tableSymbol = useMemo(() => templateDelimiter(tableIndex + 1), [tableIndex])\n\n  return (\n    <SubLayout layout={tableNameLayout}>\n      <UserInputPrimary value={tableName} style={tableNameInputStyle} onChange={updateTableName} placeHolder='Table name' />\n      <div css={tableDiceStyle}>{`d${tableLength}`}</div>\n      <div css={tableSymbolStyle}>{tableSymbol}</div>\n    </SubLayout>\n  )\n}","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { ChangeEvent, useCallback, useContext } from \"react\";\nimport { DispatchContext } from '../../App';\nimport { inputHeight, inputWidth, redScheme } from '../../constants/styleConstants';\nimport { removeTableAction } from '../../state/generator/generatorActions';\nimport { Table } from \"../../types/Table\";\nimport { PrimaryButton } from '../shared/PrimaryButton';\nimport { SecondaryButton } from '../shared/SecondaryButton';\nimport { SubLayout } from \"../shared/SubLayout\";\nimport { UserInputPrimary } from '../shared/UserInputPrimary';\nimport { TableComponent } from \"../Table\";\nimport { TableNameLayout } from './TableNameLayout';\n\nexport interface TableEntryProps {\n  value: string,\n  changeEntry: (event: ChangeEvent<HTMLInputElement>) => void,\n  entryIndex: number,\n  removeEntry: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void,\n}\n\nexport interface TableStaterenderProps {\n  tableName: string,\n  updateTableName: (event: ChangeEvent<HTMLInputElement>) => void,\n  tableEntries: TableEntryProps[]\n  addTableEntry: () => void\n  handleLastEntryEnterKey: (e: React.KeyboardEvent) => void\n}\n\nexport interface TableComponentLayoutProps {\n  table: Table,\n  tableIndex: number,\n}\n\nconst IndividualTableGrid = css({\n  gridTemplateColumns: `${inputWidth} 1fr ${inputWidth}`,\n  gridTemplateRows: `1fr`,\n});\n\nconst tableNameStyle = css({\n  gridColumnStart: 1,\n  gridColumnEnd: 4,\n  gridRow: 1,\n})\n\nconst tableButtons = css({\n  gridColumnStart: 1,\n  gridColumnEnd: 3,\n})\n\nconst removeTableButton = css({\n  float: 'right',\n})\n\nconst removeButtonStyle = css({\n  border: 'none',\n  outline: 'none',\n  appearance: 'none',\n  backgroundColor: 'transparent',\n  '&:hover,&:focus': {},\n  padding: '0 0 1px 0'\n});\n\nconst coloredEntryStyle = css({\n  backgroundColor: redScheme.highlightPallette.primary,\n});\n\nconst tableNumberStyle = css({\n  padding: '0 0 1px 0',\n  lineHeight: '24px',\n  textAlign: 'right',\n});\n\nexport const TableComponentLayout: React.FC<TableComponentLayoutProps> = ({ table, tableIndex }) => {\n  const dispatch = useContext(DispatchContext);\n  const removeTable = useCallback(() => dispatch(removeTableAction(tableIndex)), [tableIndex]);\n\n  return (\n    <TableComponent table={table} tableIndex={tableIndex} render={({\n      tableName,\n      updateTableName,\n      tableEntries,\n      addTableEntry,\n      handleLastEntryEnterKey\n    }: TableStaterenderProps) => (\n        <SubLayout layout={IndividualTableGrid}>\n          <div css={tableNameStyle}><TableNameLayout tableName={tableName} updateTableName={updateTableName} tableLength={table.entries.length} tableIndex={tableIndex} /></div>\n          { tableEntries.map(({ value, changeEntry, entryIndex, removeEntry }: TableEntryProps) => {\n            const addStyle = entryIndex % 2 ? coloredEntryStyle : undefined;\n            let onKeyDown\n            if (entryIndex + 1 === tableEntries.length) {\n              onKeyDown = handleLastEntryEnterKey;\n            }\n            return [\n              <div css={css(tableNumberStyle, addStyle)}>{entryIndex + 1}</div>,\n              <UserInputPrimary tabIndex={entryIndex} onKeyDown={onKeyDown} style={addStyle} value={value} onChange={changeEntry} key={`table-entry-${entryIndex}`} placeHolder='Entry text'/>,\n              <button css={css(removeButtonStyle, addStyle)} onClick={removeEntry} key={`close-table-entry-${entryIndex}`}>X</button>\n            ];\n          })}\n          <div css={tableButtons}>\n            <PrimaryButton onClick={addTableEntry} >Add Table Entry</PrimaryButton>\n            <SecondaryButton style={removeTableButton} onClick={removeTable} >Remove Table</SecondaryButton>\n          </div>\n        </SubLayout>\n      )} />\n  )\n}\n","import React, { useContext } from \"react\";\nimport { StateContext } from \"../App\";\nimport { getGeneratorTables } from \"../state/generator/generatorSelectors\";\nimport { AppState } from \"../state/rootInitialState\";\nimport { Table } from '../types/Table';\nimport { TableComponentLayout } from \"./layouts/TableLayout\";\n\nexport const TableList = () => {\n  const state: AppState = useContext(StateContext);\n  const tables = getGeneratorTables(state) || [];\n\n  return <>\n    {tables.map((tableEntry: Table, i: number) =>\n      <TableComponentLayout table={tableEntry} tableIndex={i} key={`table${i}`}/>\n    )}\n  </>\n}\n","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { useContext, useCallback } from 'react'\nimport { DispatchContext } from '../../App'\nimport { addTableAction } from '../../state/generator/generatorActions'\nimport { emptyTable } from '../../utils/emptyTable'\nimport { PrimaryButton } from '../shared/PrimaryButton'\nimport { SubLayout } from \"../shared/SubLayout\"\nimport { TableList } from \"../TableList\"\n\nconst addTableButton = css({\n  margin: '0 auto'\n})\nexport const TableListLayout: React.FC = () => {\n  const dispatch = useContext(DispatchContext);\n  const addTable = useCallback(() => dispatch(addTableAction(emptyTable())), [dispatch]);\n\n  return (\n    <SubLayout>\n      <TableList />\n      <div css={addTableButton}>\n        <PrimaryButton onClick={addTable}>Add Table</PrimaryButton>\n      </div>\n    </SubLayout>\n  )\n}","import { Table } from \"../types/Table\";\n\nexport const emptyTable = (): Table => ({\n  name: '',\n  entries: [''],\n});","import { SerializedStyles } from \"@emotion/react\";\nimport React, { useContext, useCallback, ChangeEvent } from \"react\";\nimport { StateContext, DispatchContext } from \"../App\";\nimport { changeTextTemplateAction } from \"../state/generator/generatorActions\";\nimport { getGeneratorTextTemplate } from \"../state/generator/generatorSelectors\";\nimport { AppState } from \"../state/rootInitialState\";\nimport { UserInputPrimary } from \"./shared/UserInputPrimary\";\n\nexport interface TextTemplateProps {\n  style?: SerializedStyles\n}\n\nexport const TextTemplate: React.FC<TextTemplateProps> = ({\n  style\n}) => {\n  const state: AppState = useContext(StateContext);\n  const dispatch = useContext(DispatchContext);\n\n  const textTemplate = getGeneratorTextTemplate(state);\n\n  const changeTextTemplate = useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    dispatch(changeTextTemplateAction(value));\n  }, [dispatch]);\n\n  return (<UserInputPrimary value={textTemplate} style={style} onChange={changeTextTemplate} placeHolder='Text template, use {{1}} to insert result'/>);\n}","/** @jsx jsx */\nimport { jsx, css, SerializedStyles } from '@emotion/react'\nimport { useContext, useMemo } from \"react\";\nimport { StateContext } from \"../../App\";\nimport { getTextTemplatePreview } from '../../state/generator/rollSelectors';\nimport { AppState } from \"../../state/rootInitialState\";\nimport { TextTemplate } from \"../TextTemplate\";\n\nconst textTemplateContainerStyle = css({\n  width: '100%'\n})\n\nconst textTemplateInputStyle = css({\n  width: 'calc(100% - 20px)',\n  marginBottom: '2px',\n});\n\nconst previewStyle = css({\n  height: '55px',\n  overflow: 'scroll'\n});\n\nconst textTemplateTitleStyle = css({\n  fontSize: '18px',\n  margin: '1rem 0',\n});\n\nexport interface TextTemplateLayoutProps {\n  style?: SerializedStyles\n}\n\nexport const TextTemplateLayout: React.FC<TextTemplateLayoutProps> = ({ style }) => {\n  const state: AppState = useContext(StateContext)\n  const preview = getTextTemplatePreview(state);\n\n  const computedStyle = useMemo(() => {\n    return css(style, textTemplateContainerStyle);\n  }, [style])\n\n  return (\n    <div css={computedStyle}>\n      <div css={textTemplateTitleStyle}>Roll result template</div>\n      <TextTemplate style={textTemplateInputStyle}/>\n      <div css={previewStyle} >preview: {preview}</div>\n    </div>\n  );\n}","import React from 'react'\nimport { useContext, useCallback } from \"react\";\nimport { DispatchContext } from '../App';\nimport { StateContext } from \"../App\";\nimport { addToHistoryAction } from \"../state/generator/generatorActions\";\nimport { getConditionalRollResult } from \"../state/generator/rollSelectors\";\nimport { AppState } from \"../state/rootInitialState\";\nimport { PrimaryButton } from './shared/PrimaryButton';\n\nexport const ConditionalRollOnTableButton: React.FC = () => {\n  const state: AppState = useContext(StateContext)\n  const dispatch = useContext(DispatchContext);\n\n  const pushRollToHistory = useCallback(() => dispatch(addToHistoryAction(getConditionalRollResult(state))), [state, dispatch]);\n  return (\n    <PrimaryButton onClick={pushRollToHistory}>Roll with Conditions</PrimaryButton>\n  )\n}","import React, { useCallback } from \"react\"\nimport { useContext } from \"react\"\nimport { DispatchContext } from \"../App\"\nimport { conditionalExampleDataState } from \"../state/exampleDataState\"\nimport { updateStateFromFileAction } from \"../state/generator/generatorActions\"\nimport { SecondaryButton } from \"./shared/SecondaryButton\"\n\nexport const LoadConditionalExampleDataButton: React.FC = () => {\n  const dispatch = useContext(DispatchContext);\n  const loadExampleDataHandler = useCallback(() => {\n    dispatch(updateStateFromFileAction(conditionalExampleDataState))\n  }, [dispatch]);\n  return (\n    <SecondaryButton onClick={loadExampleDataHandler}>Load Example Data</SecondaryButton>\n  )\n}","/** @jsx jsx */\nimport { jsx, css } from '@emotion/react'\nimport { ClearHistory } from '../ClearHistory';\nimport { ConditionalRollTable } from '../ConditionalRollTable';\nimport { ExportDataButton } from '../ExportDataButton';\nimport { FileUploadInput } from '../FileUploadInput';\nimport { GeneratorName } from '../GeneratorName';\nimport { HistoryList } from '../HistoryList';\nimport { LoadBasicExampleDataButton } from '../LoadBasicExampleDataButton';\nimport { BasicRollOnTableButton } from '../BasicRollOnTableButton';\nimport { BodyContainer } from '../shared/BodyContainer';\nimport { GridCell } from '../shared/GridCell';\nimport { Section } from '../shared/Section';\nimport { SubLayout } from '../shared/SubLayout';\nimport { Tab, TabSkeleton } from '../shared/TabSkeleton';\nimport { TableListLayout } from './TableListLayout';\nimport { TextTemplateLayout } from './TextTemplateLayout'\nimport { ConditionalRollOnTableButton } from '../ConditionalRollOnTableButton';\nimport { useMemo } from 'react';\nimport { LoadConditionalExampleDataButton } from '../LoadConditionalExampleDataButton';\n\nconst textTemplateLayoutStyles = css({\n  gridColumnStart: 1,\n  gridColumnEnd: 4,\n  gridRow: 1,\n});\n\nconst pageLayout = css({\n  gridTemplateColumns: `1fr 1fr`,\n  gridTemplateRows: 'auto',\n  columnGap: '1rem'\n})\n\nconst tableGridLayout = css({\n  gridTemplateColumns: `1fr`,\n  gridTemplateRows: '65px auto',\n});\n\nconst basicRollGridLayout = css({\n  gridTemplateColumns: `1fr 1fr 1fr `,\n  gridTemplateRows: 'auto auto 1fr auto',\n})\n\nconst conditionalRollGridLayout = css({\n  gridTemplateColumns: `1fr 1fr 1fr `,\n  gridTemplateRows: 'auto auto auto 1fr auto',\n})\n\nconst generatorNameStyles = css({\n  width: '100%',\n  fontSize: '30px',\n  padding: '0 0 5px 0',\n  margin: '36px 0 0 0',\n  '&:hover,&:focus': {\n    padding: '0 0 4px 0',\n  },\n  fontWeight: 'bold',\n});\n\nexport const BasePageLayout: React.FC = () => {\n  const tabs: Tab[] = useMemo(() => [{\n    name: 'Basic Roll',\n    component: (\n      <SubLayout layout={basicRollGridLayout}>\n        <TextTemplateLayout style={textTemplateLayoutStyles} />\n        <GridCell position={{ row: 2, cstart: 1, cend: 3 }}><BasicRollOnTableButton /></GridCell>\n        <GridCell\n          position={{ cstart: 2, cend: 4, row: 2 }}\n          styles={{ fontSize: '18px', margin: '1rem 0' }}\n        >Table Roll Results:</GridCell>\n        <GridCell position={{ cstart: 1, cend: 4, row: 3 }}><HistoryList /></GridCell>\n        <GridCell position={{ col: 1, row: 4 }}><ExportDataButton /></GridCell>\n        <GridCell position={{ col: 2, row: 4 }} styles={{ justifySelf: 'middle' }}><FileUploadInput /></GridCell>\n        <GridCell position={{ col: 3, row: 4 }} styles={{ justifySelf: 'end' }}><ClearHistory /></GridCell>\n        <GridCell position={{ col: 1, row: 5 }}><LoadBasicExampleDataButton /></GridCell>\n      </SubLayout>)\n  },\n  {\n    name: 'Conditional Roll',\n    component: (\n      <SubLayout layout={conditionalRollGridLayout}>\n        <GridCell position={{ col: 1, row: 2, cstart: 1, cend: 4 }}><ConditionalRollTable /></GridCell>\n        <GridCell position={{ row: 3, cstart: 1, cend: 3 }}><ConditionalRollOnTableButton /></GridCell>\n        <GridCell\n          position={{ cstart: 2, cend: 4, row: 3 }}\n          styles={{ fontSize: '18px', margin: '1rem 0' }}\n        >Conditional Roll Results:</GridCell>\n        <GridCell position={{ cstart: 1, cend: 4, row: 4 }}><HistoryList /></GridCell>\n        <GridCell position={{ col: 1, row: 5 }}><ExportDataButton /></GridCell>\n        <GridCell position={{ col: 2, row: 5 }} styles={{ justifySelf: 'middle' }}><FileUploadInput /></GridCell>\n        <GridCell position={{ col: 3, row: 5 }} styles={{ justifySelf: 'end' }}><ClearHistory /></GridCell>\n        <GridCell position={{ col: 1, row: 6 }}><LoadConditionalExampleDataButton /></GridCell>\n      </SubLayout>)\n  },\n], []);\n\n  return (\n    <BodyContainer>\n      <Section layout={pageLayout}>\n        <SubLayout layout={tableGridLayout}>\n          <GridCell position={{ col: 1, row: 1 }} ><GeneratorName style={generatorNameStyles} /></GridCell>\n          <GridCell position={{ col: 1, row: 2 }} ><TableListLayout /></GridCell>\n        </SubLayout>\n        <TabSkeleton initialTab={1} tabs={tabs} />\n      </Section>\n    </BodyContainer>\n  );\n}\n","import { RPGGenerator } from \"../types/Generator\";\nimport { generatorInitialState, generatorStateKey } from \"./generator/generatorReducer\";\n\nexport const rootInitialState: Record<string, RPGGenerator> = {\n  [generatorStateKey]: generatorInitialState,\n}\n\nexport type AppState = typeof rootInitialState;","import { combineReducers } from \"../utils/combineReducers\";\nimport { generatorReducer, generatorStateKey } from \"./generator/generatorReducer\";\n\nexport const rootReducer = combineReducers({\n  [generatorStateKey]: generatorReducer,\n});\n","\nimport { AppState, rootInitialState } from \"../state/rootInitialState\";\nimport { AnyAction } from \"../types/anyAction\";\n\nexport type AnyReducer = (state: any, action: AnyAction) => any;\n\nexport interface CombinedReducers {\n  [key: string]: AnyReducer\n}\n\nexport function combineReducers(reducers: CombinedReducers) {\n  return (state: any = rootInitialState, action: AnyAction): AppState => {\n    const newState: Record<string, any> = {};\n    Object.keys(reducers).forEach((key: string) => {\n      newState[key] = reducers[key](state[key], action);\n    })\n    return newState as AppState;\n  }\n}","/** @jsx jsx */\nimport { jsx } from '@emotion/react';\nimport React, { useReducer } from 'react';\nimport { Header } from './components/Header';\nimport { BasePageLayout } from './components/layouts/BasePageLayout';\nimport { rootInitialState } from './state/rootInitialState';\nimport { rootReducer } from './state/rootReducer';\nimport { defaultDispatch } from './utils/defaultDispatch';\n\nexport const StateContext = React.createContext(rootInitialState);\nexport const DispatchContext = React.createContext(defaultDispatch);\n\nconst App = () => {\n  const [state, dispatch] = useReducer(rootReducer, rootInitialState);\n\n  return (\n    <DispatchContext.Provider value={dispatch}>\n      <StateContext.Provider value={state}>\n        <Header />\n        <BasePageLayout />\n      </StateContext.Provider>\n    </DispatchContext.Provider>\n  );\n}\n\nexport default App;\n","export const defaultDispatch = (action: { type: string }) => {\n  throw new Error('Context consumer provided with default dispatch ' + action.type)\n  return;\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}